{"ast":null,"code":"var _jsxFileName = \"/Users/tumolabsstudent/Desktop/app/src/App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { Canvas, extend, useThree, useFrame } from \"react-three-fiber\";\nimport { CubeTextureLoader, CubeCamera, WebGLCubeRenderTarget, RGBFormat, LinearMipmapLinearFilter } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nextend({\n  OrbitControls\n});\nconst CameraControls = () => {\n  _s();\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls class.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n\n  const {\n    camera,\n    gl: {\n      domElement\n    }\n  } = useThree();\n\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame(() => controls.current.update());\n  return /*#__PURE__*/_jsxDEV(\"orbitControls\", {\n    ref: controls,\n    args: [camera, domElement],\n    autoRotate: true,\n    enableZoom: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n// Loads the skybox texture and applies it to the scene.\n_s(CameraControls, \"U0S+oFVuXg0+y54/McCvqwWixcI=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = CameraControls;\nfunction SkyBox() {\n  _s2();\n  const {\n    scene\n  } = useThree();\n  const loader = new CubeTextureLoader();\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n  const texture = loader.load([\"/1.jpg\", \"/2.jpg\", \"/3.jpg\", \"/4.jpg\", \"/5.jpg\", \"/6.jpg\"]);\n\n  // Set the scene background property to the resulting texture.\n  scene.background = texture;\n  return null;\n}\n\n// Geometry\n_s2(SkyBox, \"H/W0sI++KbHVw4gYmxbTnW2ERRY=\", false, function () {\n  return [useThree];\n});\n_c2 = SkyBox;\nfunction Sphere() {\n  _s3();\n  const {\n    scene,\n    gl\n  } = useThree();\n  // The cubeRenderTarget is used to generate a texture for the reflective sphere.\n  // It must be updated on each frame in order to track camera movement and other changes.\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n    format: RGBFormat,\n    generateMipmaps: true,\n    minFilter: LinearMipmapLinearFilter\n  });\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\n  cubeCamera.position.set(0, 0, 0);\n  scene.add(cubeCamera);\n\n  // Update the cubeCamera with current renderer and scene.\n  useFrame(() => cubeCamera.update(gl, scene));\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    visible: true,\n    position: [0, 0, 0],\n    rotation: [0, 0, 0],\n    castShadow: true,\n    children: [/*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      attach: \"geometry\",\n      args: [2, 32, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      attach: \"material\",\n      envMap: cubeCamera.renderTarget.texture,\n      color: \"white\",\n      roughness: 0.1,\n      metalness: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n// Lights\n_s3(Sphere, \"I09BJLOygNbL+Luyz2CCrvQJp5s=\", false, function () {\n  return [useThree, useFrame];\n});\n_c3 = Sphere;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    className: \"canvas\",\n    children: [/*#__PURE__*/_jsxDEV(CameraControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sphere, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SkyBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CameraControls\");\n$RefreshReg$(_c2, \"SkyBox\");\n$RefreshReg$(_c3, \"Sphere\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useRef","Canvas","extend","useThree","useFrame","CubeTextureLoader","CubeCamera","WebGLCubeRenderTarget","RGBFormat","LinearMipmapLinearFilter","OrbitControls","CameraControls","camera","gl","domElement","controls","current","update","SkyBox","scene","loader","texture","load","background","Sphere","cubeRenderTarget","format","generateMipmaps","minFilter","cubeCamera","position","set","add","renderTarget","App"],"sources":["/Users/tumolabsstudent/Desktop/app/src/App.tsx"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { Canvas, extend, useThree, useFrame } from \"react-three-fiber\";\nimport {\n  CubeTextureLoader,\n  CubeCamera,\n  WebGLCubeRenderTarget,\n  RGBFormat,\n  LinearMipmapLinearFilter\n} from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport \"./styles.css\";\n\nextend({ OrbitControls });\n\nconst CameraControls = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls class.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n\n  const {\n    camera,\n    gl: { domElement }\n  } = useThree();\n\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame(() => controls.current.update());\n  return (\n    <orbitControls\n      ref={controls}\n      args={[camera, domElement]}\n      autoRotate={true}\n      enableZoom={false}\n    />\n  );\n};\n\n// Loads the skybox texture and applies it to the scene.\nfunction SkyBox() {\n  const { scene } = useThree();\n  const loader = new CubeTextureLoader();\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n  const texture = loader.load([\n    \"/1.jpg\",\n    \"/2.jpg\",\n    \"/3.jpg\",\n    \"/4.jpg\",\n    \"/5.jpg\",\n    \"/6.jpg\"\n  ]);\n\n  // Set the scene background property to the resulting texture.\n  scene.background = texture;\n  return null;\n}\n\n// Geometry\nfunction Sphere() {\n  const { scene, gl } = useThree();\n  // The cubeRenderTarget is used to generate a texture for the reflective sphere.\n  // It must be updated on each frame in order to track camera movement and other changes.\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n    format: RGBFormat,\n    generateMipmaps: true,\n    minFilter: LinearMipmapLinearFilter\n  });\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\n  cubeCamera.position.set(0, 0, 0);\n  scene.add(cubeCamera);\n\n  // Update the cubeCamera with current renderer and scene.\n  useFrame(() => cubeCamera.update(gl, scene));\n\n  return (\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]} castShadow>\n      <directionalLight intensity={0.5} />\n      <sphereGeometry attach=\"geometry\" args={[2, 32, 32]} />\n      <meshBasicMaterial\n        attach=\"material\"\n        envMap={cubeCamera.renderTarget.texture}\n        color=\"white\"\n        roughness={0.1}\n        metalness={1}\n      />\n    </mesh>\n  );\n}\n\n// Lights\nfunction App() {\n  return (\n    <Canvas className=\"canvas\">\n      <CameraControls />\n      <Sphere />\n      <SkyBox />\n    </Canvas>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}