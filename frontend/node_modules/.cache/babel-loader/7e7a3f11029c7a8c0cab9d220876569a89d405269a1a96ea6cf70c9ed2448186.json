{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nconst MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\n\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\nasync function fetchProfile(xrInputSource, basePath) {\n  let defaultProfile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let getAssetPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  } // Get the list of profiles\n\n  const supportedProfilesList = await fetchProfilesList(basePath); // Find the relative path to the first requested profile that is recognized\n\n  let match = undefined;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath = undefined;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n  return {\n    profile,\n    assetPath\n  };\n}\n/** @constant {Object} */\n\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number | undefined} x The original x coordinate in the range -1 to 1\n * @param {number | undefined} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes() {\n  let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let xAxis = x;\n  let yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  const hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\n\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    _defineProperty(this, \"value\", void 0);\n    _defineProperty(this, \"componentProperty\", void 0);\n    _defineProperty(this, \"states\", void 0);\n    _defineProperty(this, \"valueNodeName\", void 0);\n    _defineProperty(this, \"valueNodeProperty\", void 0);\n    _defineProperty(this, \"minNodeName\", void 0);\n    _defineProperty(this, \"maxNodeName\", void 0);\n    _defineProperty(this, \"valueNode\", void 0);\n    _defineProperty(this, \"minNode\", void 0);\n    _defineProperty(this, \"maxNode\", void 0);\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n  updateFromComponent(_ref) {\n    let {\n      xAxis,\n      yAxis,\n      button,\n      state\n    } = _ref;\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0;\n        break;\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\nclass Component {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"values\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"gamepadIndices\", void 0);\n    _defineProperty(this, \"rootNodeName\", void 0);\n    _defineProperty(this, \"visualResponses\", void 0);\n    _defineProperty(this, \"touchPointNodeName\", void 0);\n    _defineProperty(this, \"touchPointNode\", void 0);\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n    if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize x axis value\n\n    if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize Y axis value\n\n    if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Update the visual response weights based on the current component data\n\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\n\nclass MotionController {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    _defineProperty(this, \"xrInputSource\", void 0);\n    _defineProperty(this, \"assetUrl\", void 0);\n    _defineProperty(this, \"layoutDescription\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"components\", void 0);\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error('No layout for ' + xrInputSource.handedness + ' handedness');\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":{"version":3,"names":["_defineProperty","MotionControllerConstants","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","path","response","fetch","ok","Error","statusText","json","fetchProfilesList","basePath","profileListFileName","profilesList","fetchProfile","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","match","undefined","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","handedness","layouts","keys","replace","defaultComponentValues","xAxis","yAxis","button","state","normalizeAxes","x","y","hypotenuse","Math","sqrt","theta","atan2","cos","sin","result","normalizedXAxis","normalizedYAxis","VisualResponse","constructor","visualResponseDescription","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","data","updateFromGamepad","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","push"],"sources":["/Users/tumolabsstudent/Desktop/app/node_modules/three-stdlib/libs/MotionControllers.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nconst MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\n\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  } // Get the list of profiles\n\n\n  const supportedProfilesList = await fetchProfilesList(basePath); // Find the relative path to the first requested profile that is recognized\n\n  let match = undefined;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath = undefined;\n\n  if (getAssetPath) {\n    let layout;\n\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return {\n    profile,\n    assetPath\n  };\n}\n/** @constant {Object} */\n\n\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number | undefined} x The original x coordinate in the range -1 to 1\n * @param {number | undefined} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  const hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\n\n\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    _defineProperty(this, \"value\", void 0);\n\n    _defineProperty(this, \"componentProperty\", void 0);\n\n    _defineProperty(this, \"states\", void 0);\n\n    _defineProperty(this, \"valueNodeName\", void 0);\n\n    _defineProperty(this, \"valueNodeProperty\", void 0);\n\n    _defineProperty(this, \"minNodeName\", void 0);\n\n    _defineProperty(this, \"maxNodeName\", void 0);\n\n    _defineProperty(this, \"valueNode\", void 0);\n\n    _defineProperty(this, \"minNode\", void 0);\n\n    _defineProperty(this, \"maxNode\", void 0);\n\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n\n}\n\nclass Component {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"values\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"gamepadIndices\", void 0);\n\n    _defineProperty(this, \"rootNodeName\", void 0);\n\n    _defineProperty(this, \"visualResponses\", void 0);\n\n    _defineProperty(this, \"touchPointNodeName\", void 0);\n\n    _defineProperty(this, \"touchPointNode\", void 0);\n\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n\n\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n    if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize x axis value\n\n\n    if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize Y axis value\n\n\n    if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Update the visual response weights based on the current component data\n\n\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n\n}\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\n\n\nclass MotionController {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    _defineProperty(this, \"xrInputSource\", void 0);\n\n    _defineProperty(this, \"assetUrl\", void 0);\n\n    _defineProperty(this, \"layoutDescription\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"components\", void 0);\n\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error('No layout for ' + xrInputSource.handedness + ' handedness');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n\n\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n\n\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n\n}\n\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}