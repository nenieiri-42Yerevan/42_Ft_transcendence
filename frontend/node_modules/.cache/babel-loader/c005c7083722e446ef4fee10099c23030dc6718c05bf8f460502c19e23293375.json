{"ast":null,"code":"/*!\n * camera-controls\n * https://github.com/yomotsu/camera-controls\n * (c) 2017 @yomotsu\n * Released under the MIT License.\n */\n// see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#value\nconst MOUSE_BUTTON = {\n  LEFT: 1,\n  RIGHT: 2,\n  MIDDLE: 4\n};\nconst ACTION = Object.freeze({\n  NONE: 0,\n  ROTATE: 1,\n  TRUCK: 2,\n  OFFSET: 4,\n  DOLLY: 8,\n  ZOOM: 16,\n  TOUCH_ROTATE: 32,\n  TOUCH_TRUCK: 64,\n  TOUCH_OFFSET: 128,\n  TOUCH_DOLLY: 256,\n  TOUCH_ZOOM: 512,\n  TOUCH_DOLLY_TRUCK: 1024,\n  TOUCH_DOLLY_OFFSET: 2048,\n  TOUCH_DOLLY_ROTATE: 4096,\n  TOUCH_ZOOM_TRUCK: 8192,\n  TOUCH_ZOOM_OFFSET: 16384,\n  TOUCH_ZOOM_ROTATE: 32768\n});\nfunction isPerspectiveCamera(camera) {\n  return camera.isPerspectiveCamera;\n}\nfunction isOrthographicCamera(camera) {\n  return camera.isOrthographicCamera;\n}\nconst PI_2 = Math.PI * 2;\nconst PI_HALF = Math.PI / 2;\nconst EPSILON = 1e-5;\nfunction approxZero(number) {\n  let error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return Math.abs(number) < error;\n}\nfunction approxEquals(a, b) {\n  let error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSILON;\n  return approxZero(a - b, error);\n}\nfunction roundToStep(value, step) {\n  return Math.round(value / step) * step;\n}\nfunction infinityToMaxNumber(value) {\n  if (isFinite(value)) return value;\n  if (value < 0) return -Number.MAX_VALUE;\n  return Number.MAX_VALUE;\n}\nfunction maxNumberToInfinity(value) {\n  if (Math.abs(value) < Number.MAX_VALUE) return value;\n  return value * Infinity;\n}\nfunction extractClientCoordFromEvent(pointers, out) {\n  out.set(0, 0);\n  pointers.forEach(pointer => {\n    out.x += pointer.clientX;\n    out.y += pointer.clientY;\n  });\n  out.x /= pointers.length;\n  out.y /= pointers.length;\n}\nfunction notSupportedInOrthographicCamera(camera, message) {\n  if (isOrthographicCamera(camera)) {\n    console.warn(`${message} is not supported in OrthographicCamera`);\n    return true;\n  }\n  return false;\n}\n\n/**\n * A compat function for `Quaternion.invert()` / `Quaternion.inverse()`.\n * `Quaternion.invert()` is introduced in r123 and `Quaternion.inverse()` emits a warning.\n * We are going to use this compat for a while.\n * @param target A target quaternion\n */\nfunction quatInvertCompat(target) {\n  if (target.invert) {\n    target.invert();\n  } else {\n    target.inverse();\n  }\n  return target;\n}\nclass EventDispatcher {\n  constructor() {\n    this._listeners = {};\n  }\n  /**\n   * Adds the specified event listener.\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n  addEventListener(type, listener) {\n    const listeners = this._listeners;\n    if (listeners[type] === undefined) listeners[type] = [];\n    if (listeners[type].indexOf(listener) === -1) listeners[type].push(listener);\n  }\n  // hasEventListener( type: string, listener: Listener ): boolean {\n  // \tconst listeners = this._listeners;\n  // \treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n  // }\n  /**\n   * Removes the specified event listener\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n  removeEventListener(type, listener) {\n    const listeners = this._listeners;\n    const listenerArray = listeners[type];\n    if (listenerArray !== undefined) {\n      const index = listenerArray.indexOf(listener);\n      if (index !== -1) listenerArray.splice(index, 1);\n    }\n  }\n  /**\n   * Removes all event listeners\n   * @param type event name\n   * @category Methods\n   */\n  removeAllEventListeners(type) {\n    if (!type) {\n      this._listeners = {};\n      return;\n    }\n    if (Array.isArray(this._listeners[type])) this._listeners[type].length = 0;\n  }\n  /**\n   * Fire an event type.\n   * @param event DispatcherEvent\n   * @category Methods\n   */\n  dispatchEvent(event) {\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n    if (listenerArray !== undefined) {\n      event.target = this;\n      const array = listenerArray.slice(0);\n      for (let i = 0, l = array.length; i < l; i++) {\n        array[i].call(this, event);\n      }\n    }\n  }\n}\nconst VERSION = '1.37.6'; // will be replaced with `version` in package.json during the build process.\nconst TOUCH_DOLLY_FACTOR = 1 / 8;\nconst isBrowser = typeof window !== 'undefined';\nconst isMac = isBrowser && /Mac/.test(navigator.platform);\nconst isPointerEventsNotSupported = !(isBrowser && 'PointerEvent' in window); // Safari 12 does not support PointerEvents API\nlet THREE;\nlet _ORIGIN;\nlet _AXIS_Y;\nlet _AXIS_Z;\nlet _v2;\nlet _v3A;\nlet _v3B;\nlet _v3C;\nlet _xColumn;\nlet _yColumn;\nlet _zColumn;\nlet _deltaTarget;\nlet _deltaOffset;\nlet _sphericalA;\nlet _sphericalB;\nlet _box3A;\nlet _box3B;\nlet _sphere;\nlet _quaternionA;\nlet _quaternionB;\nlet _rotationMatrix;\nlet _raycaster;\nclass CameraControls extends EventDispatcher {\n  /**\n   * Injects THREE as the dependency. You can then proceed to use CameraControls.\n   *\n   * e.g\n   * ```javascript\n   * CameraControls.install( { THREE: THREE } );\n   * ```\n   *\n   * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.\n   *\n   * ```js\n   * import {\n   * \tVector2,\n   * \tVector3,\n   * \tVector4,\n   * \tQuaternion,\n   * \tMatrix4,\n   * \tSpherical,\n   * \tBox3,\n   * \tSphere,\n   * \tRaycaster,\n   * \tMathUtils,\n   * } from 'three';\n   *\n   * const subsetOfTHREE = {\n   * \tVector2   : Vector2,\n   * \tVector3   : Vector3,\n   * \tVector4   : Vector4,\n   * \tQuaternion: Quaternion,\n   * \tMatrix4   : Matrix4,\n   * \tSpherical : Spherical,\n   * \tBox3      : Box3,\n   * \tSphere    : Sphere,\n   * \tRaycaster : Raycaster,\n   * \tMathUtils : {\n   * \t\tDEG2RAD: MathUtils.DEG2RAD,\n   * \t\tclamp: MathUtils.clamp,\n   * \t},\n   * };\n    * CameraControls.install( { THREE: subsetOfTHREE } );\n   * ```\n   * @category Statics\n   */\n  static install(libs) {\n    THREE = libs.THREE;\n    _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));\n    _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));\n    _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));\n    _v2 = new THREE.Vector2();\n    _v3A = new THREE.Vector3();\n    _v3B = new THREE.Vector3();\n    _v3C = new THREE.Vector3();\n    _xColumn = new THREE.Vector3();\n    _yColumn = new THREE.Vector3();\n    _zColumn = new THREE.Vector3();\n    _deltaTarget = new THREE.Vector3();\n    _deltaOffset = new THREE.Vector3();\n    _sphericalA = new THREE.Spherical();\n    _sphericalB = new THREE.Spherical();\n    _box3A = new THREE.Box3();\n    _box3B = new THREE.Box3();\n    _sphere = new THREE.Sphere();\n    _quaternionA = new THREE.Quaternion();\n    _quaternionB = new THREE.Quaternion();\n    _rotationMatrix = new THREE.Matrix4();\n    _raycaster = new THREE.Raycaster();\n  }\n  /**\n   * list all ACTIONs\n   * @category Statics\n   */\n  static get ACTION() {\n    return ACTION;\n  }\n  /**\n   * Creates a `CameraControls` instance.\n   *\n   * Note:\n   * You **must install** three.js before using camera-controls. see [#install](#install)\n   * Not doing so will lead to runtime errors (`undefined` references to THREE).\n   *\n   * e.g.\n   * ```\n   * CameraControls.install( { THREE } );\n   * const cameraControls = new CameraControls( camera, domElement );\n   * ```\n   *\n   * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.\n   * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.\n   * @category Constructor\n   */\n  constructor(camera, domElement) {\n    super();\n    /**\n     * Minimum vertical angle in radians.\n     * The angle has to be between `0` and `.maxPolarAngle` inclusive.\n     * The default value is `0`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxPolarAngle = 0;\n     * ```\n     * @category Properties\n     */\n    this.minPolarAngle = 0; // radians\n    /**\n     * Maximum vertical angle in radians.\n     * The angle has to be between `.maxPolarAngle` and `Math.PI` inclusive.\n     * The default value is `Math.PI`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxPolarAngle = Math.PI;\n     * ```\n     * @category Properties\n     */\n    this.maxPolarAngle = Math.PI; // radians\n    /**\n     * Minimum horizontal angle in radians.\n     * The angle has to be less than `.maxAzimuthAngle`.\n     * The default value is `- Infinity`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.minAzimuthAngle = - Infinity;\n     * ```\n     * @category Properties\n     */\n    this.minAzimuthAngle = -Infinity; // radians\n    /**\n     * Maximum horizontal angle in radians.\n     * The angle has to be greater than `.minAzimuthAngle`.\n     * The default value is `Infinity`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxAzimuthAngle = Infinity;\n     * ```\n     * @category Properties\n     */\n    this.maxAzimuthAngle = Infinity; // radians\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    /**\n     * Minimum distance for dolly. The value must be higher than `0`.\n     * PerspectiveCamera only.\n     * @category Properties\n     */\n    this.minDistance = 0;\n    /**\n     * Maximum distance for dolly. The value must be higher than `minDistance`.\n     * PerspectiveCamera only.\n     * @category Properties\n     */\n    this.maxDistance = Infinity;\n    /**\n     * `true` to enable Infinity Dolly.\n     * When the Dolly distance is less than the `minDistance`, radius of the sphere will be set `minDistance` automatically.\n     * @category Properties\n     */\n    this.infinityDolly = false;\n    /**\n     * Minimum camera zoom.\n     * @category Properties\n     */\n    this.minZoom = 0.01;\n    /**\n     * Maximum camera zoom.\n     * @category Properties\n     */\n    this.maxZoom = Infinity;\n    /**\n     * The damping inertia.\n     * The value must be between `Math.EPSILON` to `1` inclusive.\n     * Setting `1` to disable smooth transitions.\n     * @category Properties\n     */\n    this.dampingFactor = 0.05;\n    /**\n     * The damping inertia while dragging.\n     * The value must be between `Math.EPSILON` to `1` inclusive.\n     * Setting `1` to disable smooth transitions.\n     * @category Properties\n     */\n    this.draggingDampingFactor = 0.25;\n    /**\n     * Speed of azimuth (horizontal) rotation.\n     * @category Properties\n     */\n    this.azimuthRotateSpeed = 1.0;\n    /**\n     * Speed of polar (vertical) rotation.\n     * @category Properties\n     */\n    this.polarRotateSpeed = 1.0;\n    /**\n     * Speed of mouse-wheel dollying.\n     * @category Properties\n     */\n    this.dollySpeed = 1.0;\n    /**\n     * Speed of drag for truck and pedestal.\n     * @category Properties\n     */\n    this.truckSpeed = 2.0;\n    /**\n     * `true` to enable Dolly-in to the mouse cursor coords.\n     * @category Properties\n     */\n    this.dollyToCursor = false;\n    /**\n     * @category Properties\n     */\n    this.dragToOffset = false;\n    /**\n     * The same as `.screenSpacePanning` in three.js's OrbitControls.\n     * @category Properties\n     */\n    this.verticalDragToForward = false;\n    /**\n     * Friction ratio of the boundary.\n     * @category Properties\n     */\n    this.boundaryFriction = 0.0;\n    /**\n     * Controls how soon the `rest` event fires as the camera slows.\n     * @category Properties\n     */\n    this.restThreshold = 0.01;\n    /**\n     * An array of Meshes to collide with camera.\n     * Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n     * @category Properties\n     */\n    this.colliderMeshes = [];\n    /**\n     * Force cancel user dragging.\n     * @category Methods\n     */\n    // cancel will be overwritten in the constructor.\n    this.cancel = () => {};\n    this._enabled = true;\n    this._state = ACTION.NONE;\n    this._viewport = null;\n    this._affectOffset = false;\n    this._dollyControlAmount = 0;\n    this._hasRested = true;\n    this._boundaryEnclosesCamera = false;\n    this._needsUpdate = true;\n    this._updatedLastTime = false;\n    this._elementRect = new DOMRect();\n    this._activePointers = [];\n    this._truckInternal = (deltaX, deltaY, dragToOffset) => {\n      if (isPerspectiveCamera(this._camera)) {\n        const offset = _v3A.copy(this._camera.position).sub(this._target);\n        // half of the fov is center to top of screen\n        const fov = this._camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD;\n        const targetDistance = offset.length() * Math.tan(fov * 0.5);\n        const truckX = this.truckSpeed * deltaX * targetDistance / this._elementRect.height;\n        const pedestalY = this.truckSpeed * deltaY * targetDistance / this._elementRect.height;\n        if (this.verticalDragToForward) {\n          dragToOffset ? this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y, this._focalOffsetEnd.z, true) : this.truck(truckX, 0, true);\n          this.forward(-pedestalY, true);\n        } else {\n          dragToOffset ? this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) : this.truck(truckX, pedestalY, true);\n        }\n      } else if (isOrthographicCamera(this._camera)) {\n        // orthographic\n        const camera = this._camera;\n        const truckX = deltaX * (camera.right - camera.left) / camera.zoom / this._elementRect.width;\n        const pedestalY = deltaY * (camera.top - camera.bottom) / camera.zoom / this._elementRect.height;\n        dragToOffset ? this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) : this.truck(truckX, pedestalY, true);\n      }\n    };\n    this._rotateInternal = (deltaX, deltaY) => {\n      const theta = PI_2 * this.azimuthRotateSpeed * deltaX / this._elementRect.height; // divide by *height* to refer the resolution\n      const phi = PI_2 * this.polarRotateSpeed * deltaY / this._elementRect.height;\n      this.rotate(theta, phi, true);\n    };\n    this._dollyInternal = (delta, x, y) => {\n      const dollyScale = Math.pow(0.95, -delta * this.dollySpeed);\n      const distance = this._sphericalEnd.radius * dollyScale;\n      const prevRadius = this._sphericalEnd.radius;\n      const signedPrevRadius = prevRadius * (delta >= 0 ? -1 : 1);\n      this.dollyTo(distance);\n      if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n        this._camera.getWorldDirection(_v3A);\n        this._targetEnd.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n        this._target.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n      }\n      if (this.dollyToCursor) {\n        this._dollyControlAmount += this._sphericalEnd.radius - prevRadius;\n        if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n          this._dollyControlAmount -= signedPrevRadius;\n        }\n        this._dollyControlCoord.set(x, y);\n      }\n      return;\n    };\n    this._zoomInternal = (delta, x, y) => {\n      const zoomScale = Math.pow(0.95, delta * this.dollySpeed);\n      const prevZoom = this._zoomEnd;\n      // for both PerspectiveCamera and OrthographicCamera\n      this.zoomTo(this._zoom * zoomScale);\n      if (this.dollyToCursor) {\n        this._dollyControlAmount += this._zoomEnd - prevZoom;\n        this._dollyControlCoord.set(x, y);\n      }\n      return;\n    };\n    // Check if the user has installed THREE\n    if (typeof THREE === 'undefined') {\n      console.error('camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.');\n    }\n    this._camera = camera;\n    this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(this._camera.up, _AXIS_Y);\n    this._yAxisUpSpaceInverse = quatInvertCompat(this._yAxisUpSpace.clone());\n    this._state = ACTION.NONE;\n    // the location\n    this._target = new THREE.Vector3();\n    this._targetEnd = this._target.clone();\n    this._focalOffset = new THREE.Vector3();\n    this._focalOffsetEnd = this._focalOffset.clone();\n    // rotation\n    this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace));\n    this._sphericalEnd = this._spherical.clone();\n    this._zoom = this._camera.zoom;\n    this._zoomEnd = this._zoom;\n    // collisionTest uses nearPlane.s\n    this._nearPlaneCorners = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];\n    this._updateNearPlaneCorners();\n    // Target cannot move outside of this box\n    this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity));\n    // reset\n    this._target0 = this._target.clone();\n    this._position0 = this._camera.position.clone();\n    this._zoom0 = this._zoom;\n    this._focalOffset0 = this._focalOffset.clone();\n    this._dollyControlAmount = 0;\n    this._dollyControlCoord = new THREE.Vector2();\n    // configs\n    this.mouseButtons = {\n      left: ACTION.ROTATE,\n      middle: ACTION.DOLLY,\n      right: ACTION.TRUCK,\n      wheel: isPerspectiveCamera(this._camera) ? ACTION.DOLLY : isOrthographicCamera(this._camera) ? ACTION.ZOOM : ACTION.NONE\n    };\n    this.touches = {\n      one: ACTION.TOUCH_ROTATE,\n      two: isPerspectiveCamera(this._camera) ? ACTION.TOUCH_DOLLY_TRUCK : isOrthographicCamera(this._camera) ? ACTION.TOUCH_ZOOM_TRUCK : ACTION.NONE,\n      three: ACTION.TOUCH_TRUCK\n    };\n    const dragStartPosition = new THREE.Vector2();\n    const lastDragPosition = new THREE.Vector2();\n    const dollyStart = new THREE.Vector2();\n    const onPointerDown = event => {\n      if (!this._enabled || !this._domElement) return;\n      // Don't call `event.preventDefault()` on the pointerdown event\n      // to keep receiving pointermove evens outside dragging iframe\n      // https://taye.me/blog/tips/2015/11/16/mouse-drag-outside-iframe/\n      const pointer = {\n        pointerId: event.pointerId,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        deltaX: 0,\n        deltaY: 0\n      };\n      this._activePointers.push(pointer);\n      // eslint-disable-next-line no-undef\n      this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n      this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n      this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n      this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n      startDragging(event);\n    };\n    const onMouseDown = event => {\n      if (!this._enabled || !this._domElement) return;\n      const pointer = {\n        pointerId: 0,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        deltaX: 0,\n        deltaY: 0\n      };\n      this._activePointers.push(pointer);\n      // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n      // eslint-disable-next-line no-undef\n      this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n      this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n      this._domElement.ownerDocument.addEventListener('mousemove', onMouseMove);\n      this._domElement.ownerDocument.addEventListener('mouseup', onMouseUp);\n      startDragging(event);\n    };\n    const onTouchStart = event => {\n      if (!this._enabled || !this._domElement) return;\n      event.preventDefault();\n      Array.prototype.forEach.call(event.changedTouches, touch => {\n        const pointer = {\n          pointerId: touch.identifier,\n          clientX: touch.clientX,\n          clientY: touch.clientY,\n          deltaX: 0,\n          deltaY: 0\n        };\n        this._activePointers.push(pointer);\n      });\n      // eslint-disable-next-line no-undef\n      this._domElement.ownerDocument.removeEventListener('touchmove', onTouchMove, {\n        passive: false\n      });\n      this._domElement.ownerDocument.removeEventListener('touchend', onTouchEnd);\n      this._domElement.ownerDocument.addEventListener('touchmove', onTouchMove, {\n        passive: false\n      });\n      this._domElement.ownerDocument.addEventListener('touchend', onTouchEnd);\n      startDragging(event);\n    };\n    const onPointerMove = event => {\n      if (event.cancelable) event.preventDefault();\n      const pointerId = event.pointerId;\n      const pointer = this._findPointerById(pointerId);\n      if (!pointer) return;\n      pointer.clientX = event.clientX;\n      pointer.clientY = event.clientY;\n      pointer.deltaX = event.movementX;\n      pointer.deltaY = event.movementY;\n      if (event.pointerType === 'touch') {\n        switch (this._activePointers.length) {\n          case 1:\n            this._state = this.touches.one;\n            break;\n          case 2:\n            this._state = this.touches.two;\n            break;\n          case 3:\n            this._state = this.touches.three;\n            break;\n        }\n      } else {\n        this._state = 0;\n        if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n          this._state = this._state | this.mouseButtons.left;\n        }\n        if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n          this._state = this._state | this.mouseButtons.middle;\n        }\n        if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n          this._state = this._state | this.mouseButtons.right;\n        }\n      }\n      dragging();\n    };\n    const onMouseMove = event => {\n      const pointer = this._findPointerById(0);\n      if (!pointer) return;\n      pointer.clientX = event.clientX;\n      pointer.clientY = event.clientY;\n      pointer.deltaX = event.movementX;\n      pointer.deltaY = event.movementY;\n      this._state = 0;\n      if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n        this._state = this._state | this.mouseButtons.left;\n      }\n      if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n        this._state = this._state | this.mouseButtons.middle;\n      }\n      if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n        this._state = this._state | this.mouseButtons.right;\n      }\n      dragging();\n    };\n    const onTouchMove = event => {\n      if (event.cancelable) event.preventDefault();\n      Array.prototype.forEach.call(event.changedTouches, touch => {\n        const pointerId = touch.identifier;\n        const pointer = this._findPointerById(pointerId);\n        if (!pointer) return;\n        pointer.clientX = touch.clientX;\n        pointer.clientY = touch.clientY;\n        // touch event does not have movementX and movementY.\n      });\n\n      dragging();\n    };\n    const onPointerUp = event => {\n      const pointerId = event.pointerId;\n      const pointer = this._findPointerById(pointerId);\n      pointer && this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n      if (event.pointerType === 'touch') {\n        switch (this._activePointers.length) {\n          case 0:\n            this._state = ACTION.NONE;\n            break;\n          case 1:\n            this._state = this.touches.one;\n            break;\n          case 2:\n            this._state = this.touches.two;\n            break;\n          case 3:\n            this._state = this.touches.three;\n            break;\n        }\n      } else {\n        this._state = ACTION.NONE;\n      }\n      endDragging();\n    };\n    const onMouseUp = () => {\n      const pointer = this._findPointerById(0);\n      pointer && this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n      this._state = ACTION.NONE;\n      endDragging();\n    };\n    const onTouchEnd = event => {\n      Array.prototype.forEach.call(event.changedTouches, touch => {\n        const pointerId = touch.identifier;\n        const pointer = this._findPointerById(pointerId);\n        pointer && this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n      });\n      switch (this._activePointers.length) {\n        case 0:\n          this._state = ACTION.NONE;\n          break;\n        case 1:\n          this._state = this.touches.one;\n          break;\n        case 2:\n          this._state = this.touches.two;\n          break;\n        case 3:\n          this._state = this.touches.three;\n          break;\n      }\n      endDragging();\n    };\n    let lastScrollTimeStamp = -1;\n    const onMouseWheel = event => {\n      if (!this._enabled || this.mouseButtons.wheel === ACTION.NONE) return;\n      event.preventDefault();\n      if (this.dollyToCursor || this.mouseButtons.wheel === ACTION.ROTATE || this.mouseButtons.wheel === ACTION.TRUCK) {\n        const now = performance.now();\n        // only need to fire this at scroll start.\n        if (lastScrollTimeStamp - now < 1000) this._getClientRect(this._elementRect);\n        lastScrollTimeStamp = now;\n      }\n      // Ref: https://github.com/cedricpinson/osgjs/blob/00e5a7e9d9206c06fdde0436e1d62ab7cb5ce853/sources/osgViewer/input/source/InputSourceMouse.js#L89-L103\n      const deltaYFactor = isMac ? -1 : -3;\n      const delta = event.deltaMode === 1 ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);\n      const x = this.dollyToCursor ? (event.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n      const y = this.dollyToCursor ? (event.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n      switch (this.mouseButtons.wheel) {\n        case ACTION.ROTATE:\n          {\n            this._rotateInternal(event.deltaX, event.deltaY);\n            break;\n          }\n        case ACTION.TRUCK:\n          {\n            this._truckInternal(event.deltaX, event.deltaY, false);\n            break;\n          }\n        case ACTION.OFFSET:\n          {\n            this._truckInternal(event.deltaX, event.deltaY, true);\n            break;\n          }\n        case ACTION.DOLLY:\n          {\n            this._dollyInternal(-delta, x, y);\n            break;\n          }\n        case ACTION.ZOOM:\n          {\n            this._zoomInternal(-delta, x, y);\n            break;\n          }\n      }\n      this.dispatchEvent({\n        type: 'control'\n      });\n    };\n    const onContextMenu = event => {\n      if (!this._enabled) return;\n      event.preventDefault();\n    };\n    const startDragging = event => {\n      if (!this._enabled) return;\n      extractClientCoordFromEvent(this._activePointers, _v2);\n      this._getClientRect(this._elementRect);\n      dragStartPosition.copy(_v2);\n      lastDragPosition.copy(_v2);\n      const isMultiTouch = this._activePointers.length >= 2;\n      if (isMultiTouch) {\n        // 2 finger pinch\n        const dx = _v2.x - this._activePointers[1].clientX;\n        const dy = _v2.y - this._activePointers[1].clientY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        dollyStart.set(0, distance);\n        // center coords of 2 finger truck\n        const x = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5;\n        const y = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;\n        lastDragPosition.set(x, y);\n      }\n      if ('touches' in event || 'pointerType' in event && event.pointerType === 'touch') {\n        switch (this._activePointers.length) {\n          case 1:\n            this._state = this.touches.one;\n            break;\n          case 2:\n            this._state = this.touches.two;\n            break;\n          case 3:\n            this._state = this.touches.three;\n            break;\n        }\n      } else {\n        this._state = 0;\n        if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n          this._state = this._state | this.mouseButtons.left;\n        }\n        if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n          this._state = this._state | this.mouseButtons.middle;\n        }\n        if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n          this._state = this._state | this.mouseButtons.right;\n        }\n      }\n      this.dispatchEvent({\n        type: 'controlstart'\n      });\n    };\n    const dragging = () => {\n      if (!this._enabled) return;\n      extractClientCoordFromEvent(this._activePointers, _v2);\n      // When pointer lock is enabled clientX, clientY, screenX, and screenY remain 0.\n      // If pointer lock is enabled, use the Delta directory, and assume active-pointer is not multiple.\n      const isPointerLockActive = this._domElement && document.pointerLockElement === this._domElement;\n      const deltaX = isPointerLockActive ? -this._activePointers[0].deltaX : lastDragPosition.x - _v2.x;\n      const deltaY = isPointerLockActive ? -this._activePointers[0].deltaY : lastDragPosition.y - _v2.y;\n      lastDragPosition.copy(_v2);\n      if ((this._state & ACTION.ROTATE) === ACTION.ROTATE || (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        this._rotateInternal(deltaX, deltaY);\n      }\n      if ((this._state & ACTION.DOLLY) === ACTION.DOLLY || (this._state & ACTION.ZOOM) === ACTION.ZOOM) {\n        const dollyX = this.dollyToCursor ? (dragStartPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n        const dollyY = this.dollyToCursor ? (dragStartPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n        (this._state & ACTION.DOLLY) === ACTION.DOLLY ? this._dollyInternal(deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY) : this._zoomInternal(deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n      }\n      if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        const dx = _v2.x - this._activePointers[1].clientX;\n        const dy = _v2.y - this._activePointers[1].clientY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const dollyDelta = dollyStart.y - distance;\n        dollyStart.set(0, distance);\n        const dollyX = this.dollyToCursor ? (lastDragPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n        const dollyY = this.dollyToCursor ? (lastDragPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n        (this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ? this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY) : this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n      }\n      if ((this._state & ACTION.TRUCK) === ACTION.TRUCK || (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n        this._truckInternal(deltaX, deltaY, false);\n      }\n      if ((this._state & ACTION.OFFSET) === ACTION.OFFSET || (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n        this._truckInternal(deltaX, deltaY, true);\n      }\n      this.dispatchEvent({\n        type: 'control'\n      });\n    };\n    const endDragging = () => {\n      extractClientCoordFromEvent(this._activePointers, _v2);\n      lastDragPosition.copy(_v2);\n      if (this._activePointers.length === 0 && this._domElement) {\n        // eslint-disable-next-line no-undef\n        this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n          passive: false\n        });\n        this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n        // eslint-disable-next-line no-undef\n        this._domElement.ownerDocument.removeEventListener('touchmove', onTouchMove, {\n          passive: false\n        });\n        this._domElement.ownerDocument.removeEventListener('touchend', onTouchEnd);\n        this.dispatchEvent({\n          type: 'controlend'\n        });\n      }\n    };\n    this._addAllEventListeners = domElement => {\n      this._domElement = domElement;\n      this._domElement.style.touchAction = 'none';\n      this._domElement.style.userSelect = 'none';\n      this._domElement.style.webkitUserSelect = 'none';\n      this._domElement.addEventListener('pointerdown', onPointerDown);\n      isPointerEventsNotSupported && this._domElement.addEventListener('mousedown', onMouseDown);\n      isPointerEventsNotSupported && this._domElement.addEventListener('touchstart', onTouchStart);\n      this._domElement.addEventListener('pointercancel', onPointerUp);\n      this._domElement.addEventListener('wheel', onMouseWheel, {\n        passive: false\n      });\n      this._domElement.addEventListener('contextmenu', onContextMenu);\n    };\n    this._removeAllEventListeners = () => {\n      if (!this._domElement) return;\n      this._domElement.removeEventListener('pointerdown', onPointerDown);\n      this._domElement.removeEventListener('mousedown', onMouseDown);\n      this._domElement.removeEventListener('touchstart', onTouchStart);\n      this._domElement.removeEventListener('pointercancel', onPointerUp);\n      // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal\n      // > it's probably wise to use the same values used for the call to `addEventListener()` when calling `removeEventListener()`\n      // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n      // eslint-disable-next-line no-undef\n      this._domElement.removeEventListener('wheel', onMouseWheel, {\n        passive: false\n      });\n      this._domElement.removeEventListener('contextmenu', onContextMenu);\n      // eslint-disable-next-line no-undef\n      this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n      this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n      // eslint-disable-next-line no-undef\n      this._domElement.ownerDocument.removeEventListener('touchmove', onTouchMove, {\n        passive: false\n      });\n      this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n      this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n      this._domElement.ownerDocument.removeEventListener('touchend', onTouchEnd);\n    };\n    this.cancel = () => {\n      if (this._state === ACTION.NONE) return;\n      this._state = ACTION.NONE;\n      this._activePointers.length = 0;\n      endDragging();\n    };\n    if (domElement) this.connect(domElement);\n    this.update(0);\n  }\n  /**\n   * The camera to be controlled\n   * @category Properties\n   */\n  get camera() {\n    return this._camera;\n  }\n  set camera(camera) {\n    this._camera = camera;\n    this.updateCameraUp();\n    this._camera.updateProjectionMatrix();\n    this._updateNearPlaneCorners();\n    this._needsUpdate = true;\n  }\n  /**\n   * Whether or not the controls are enabled.\n   * `false` to disable user dragging/touch-move, but all methods works.\n   * @category Properties\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(enabled) {\n    if (!this._domElement) return;\n    this._enabled = enabled;\n    if (enabled) {\n      this._domElement.style.touchAction = 'none';\n      this._domElement.style.userSelect = 'none';\n      this._domElement.style.webkitUserSelect = 'none';\n    } else {\n      this.cancel();\n      this._domElement.style.touchAction = '';\n      this._domElement.style.userSelect = '';\n      this._domElement.style.webkitUserSelect = '';\n    }\n  }\n  /**\n   * Returns `true` if the controls are active updating.\n   * readonly value.\n   * @category Properties\n   */\n  get active() {\n    return !this._hasRested;\n  }\n  /**\n   * Getter for the current `ACTION`.\n   * readonly value.\n   * @category Properties\n   */\n  get currentAction() {\n    return this._state;\n  }\n  /**\n   * get/set Current distance.\n   * @category Properties\n   */\n  get distance() {\n    return this._spherical.radius;\n  }\n  set distance(distance) {\n    if (this._spherical.radius === distance && this._sphericalEnd.radius === distance) return;\n    this._spherical.radius = distance;\n    this._sphericalEnd.radius = distance;\n    this._needsUpdate = true;\n  }\n  // horizontal angle\n  /**\n   * get/set the azimuth angle (horizontal) in radians.\n   * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.\n   * @category Properties\n   */\n  get azimuthAngle() {\n    return this._spherical.theta;\n  }\n  set azimuthAngle(azimuthAngle) {\n    if (this._spherical.theta === azimuthAngle && this._sphericalEnd.theta === azimuthAngle) return;\n    this._spherical.theta = azimuthAngle;\n    this._sphericalEnd.theta = azimuthAngle;\n    this._needsUpdate = true;\n  }\n  // vertical angle\n  /**\n   * get/set the polar angle (vertical) in radians.\n   * @category Properties\n   */\n  get polarAngle() {\n    return this._spherical.phi;\n  }\n  set polarAngle(polarAngle) {\n    if (this._spherical.phi === polarAngle && this._sphericalEnd.phi === polarAngle) return;\n    this._spherical.phi = polarAngle;\n    this._sphericalEnd.phi = polarAngle;\n    this._needsUpdate = true;\n  }\n  /**\n   * Whether camera position should be enclosed in the boundary or not.\n   * @category Properties\n   */\n  get boundaryEnclosesCamera() {\n    return this._boundaryEnclosesCamera;\n  }\n  set boundaryEnclosesCamera(boundaryEnclosesCamera) {\n    this._boundaryEnclosesCamera = boundaryEnclosesCamera;\n    this._needsUpdate = true;\n  }\n  /**\n   * Adds the specified event listener.\n   * Applicable event types (which is `K`) are:\n   * | Event name          | Timing |\n   * | ------------------- | ------ |\n   * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |\n   * | `'control'`         | When the user controls the camera (dragging). |\n   * | `'controlend'`      | When the user ends to control the camera. ¹ |\n   * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |\n   * | `'update'`          | When the camera position is updated. |\n   * | `'wake'`            | When the camera starts moving. |\n   * | `'rest'`            | When the camera movement is below `.restThreshold` ². |\n   * | `'sleep'`           | When the camera end moving. |\n   *\n   * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n   * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).\n   *\n   * e.g.\n   * ```\n   * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n   * ```\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n  addEventListener(type, listener) {\n    super.addEventListener(type, listener);\n  }\n  /**\n   * Removes the specified event listener\n   * e.g.\n   * ```\n   * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n   * ```\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n  removeEventListener(type, listener) {\n    super.removeEventListener(type, listener);\n  }\n  /**\n   * Rotate azimuthal angle(horizontal) and polar angle(vertical).\n   * Every value is added to the current value.\n   * @param azimuthAngle Azimuth rotate angle. In radian.\n   * @param polarAngle Polar rotate angle. In radian.\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n  rotate(azimuthAngle, polarAngle) {\n    let enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);\n  }\n  /**\n   * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n   *\n   * e.g.\n   * ```\n   * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );\n   * ```\n   * @param azimuthAngle Azimuth rotate angle. In radian.\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n  rotateAzimuthTo(azimuthAngle) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);\n  }\n  /**\n   * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n   *\n   * e.g.\n   * ```\n   * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );\n   * ```\n   * @param polarAngle Polar rotate angle. In radian.\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n  rotatePolarTo(polarAngle) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);\n  }\n  /**\n   * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.\n   * Camera view will rotate over the orbit pivot absolutely:\n   *\n   * azimuthAngle\n   * ```\n   *       0º\n   *         \\\n   * 90º -----+----- -90º\n   *           \\\n   *           180º\n   * ```\n   * | direction | angle                  |\n   * | --------- | ---------------------- |\n   * | front     | 0º                     |\n   * | left      | 90º (`Math.PI / 2`)    |\n   * | right     | -90º (`- Math.PI / 2`) |\n   * | back      | 180º (`Math.PI`)       |\n   *\n   * polarAngle\n   * ```\n   *     180º\n   *      |\n   *      90º\n   *      |\n   *      0º\n   * ```\n   * | direction            | angle                  |\n   * | -------------------- | ---------------------- |\n   * | top/sky              | 180º (`Math.PI`)       |\n   * | horizontal from view | 90º (`Math.PI / 2`)    |\n   * | bottom/floor         | 0º                     |\n   *\n   * @param azimuthAngle Azimuth rotate angle to. In radian.\n   * @param polarAngle Polar rotate angle to. In radian.\n   * @param enableTransition  Whether to move smoothly or immediately\n   * @category Methods\n   */\n  rotateTo(azimuthAngle, polarAngle) {\n    let enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const theta = THREE.MathUtils.clamp(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);\n    const phi = THREE.MathUtils.clamp(polarAngle, this.minPolarAngle, this.maxPolarAngle);\n    this._sphericalEnd.theta = theta;\n    this._sphericalEnd.phi = phi;\n    this._sphericalEnd.makeSafe();\n    this._needsUpdate = true;\n    if (!enableTransition) {\n      this._spherical.theta = this._sphericalEnd.theta;\n      this._spherical.phi = this._sphericalEnd.phi;\n    }\n    const resolveImmediately = !enableTransition || approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Dolly in/out camera position.\n   * @param distance Distance of dollyIn. Negative number for dollyOut.\n   * @param enableTransition Whether to move smoothly or immediately.\n   * @category Methods\n   */\n  dolly(distance) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.dollyTo(this._sphericalEnd.radius - distance, enableTransition);\n  }\n  /**\n   * Dolly in/out camera position to given distance.\n   * @param distance Distance of dolly.\n   * @param enableTransition Whether to move smoothly or immediately.\n   * @category Methods\n   */\n  dollyTo(distance) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const lastRadius = this._sphericalEnd.radius;\n    const newRadius = THREE.MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n    const hasCollider = this.colliderMeshes.length >= 1;\n    if (hasCollider) {\n      const maxDistanceByCollisionTest = this._collisionTest();\n      const isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);\n      const isDollyIn = lastRadius > newRadius;\n      if (!isDollyIn && isCollided) return Promise.resolve();\n      this._sphericalEnd.radius = Math.min(newRadius, maxDistanceByCollisionTest);\n    } else {\n      this._sphericalEnd.radius = newRadius;\n    }\n    this._needsUpdate = true;\n    if (!enableTransition) {\n      this._spherical.radius = this._sphericalEnd.radius;\n    }\n    const resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Zoom in/out camera. The value is added to camera zoom.\n   * Limits set with `.minZoom` and `.maxZoom`\n   * @param zoomStep zoom scale\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n  zoom(zoomStep) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);\n  }\n  /**\n   * Zoom in/out camera to given scale. The value overwrites camera zoom.\n   * Limits set with .minZoom and .maxZoom\n   * @param zoom\n   * @param enableTransition\n   * @category Methods\n   */\n  zoomTo(zoom) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this._zoomEnd = THREE.MathUtils.clamp(zoom, this.minZoom, this.maxZoom);\n    this._needsUpdate = true;\n    if (!enableTransition) {\n      this._zoom = this._zoomEnd;\n    }\n    const resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * @deprecated `pan()` has been renamed to `truck()`\n   * @category Methods\n   */\n  pan(x, y) {\n    let enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    console.warn('`pan` has been renamed to `truck`');\n    return this.truck(x, y, enableTransition);\n  }\n  /**\n   * Truck and pedestal camera using current azimuthal angle\n   * @param x Horizontal translate amount\n   * @param y Vertical translate amount\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n  truck(x, y) {\n    let enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this._camera.updateMatrix();\n    _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n    _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n    _xColumn.multiplyScalar(x);\n    _yColumn.multiplyScalar(-y);\n    const offset = _v3A.copy(_xColumn).add(_yColumn);\n    const to = _v3B.copy(this._targetEnd).add(offset);\n    return this.moveTo(to.x, to.y, to.z, enableTransition);\n  }\n  /**\n   * Move forward / backward.\n   * @param distance Amount to move forward / backward. Negative value to move backward\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n  forward(distance) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    _v3A.setFromMatrixColumn(this._camera.matrix, 0);\n    _v3A.crossVectors(this._camera.up, _v3A);\n    _v3A.multiplyScalar(distance);\n    const to = _v3B.copy(this._targetEnd).add(_v3A);\n    return this.moveTo(to.x, to.y, to.z, enableTransition);\n  }\n  /**\n   * Move target position to given point.\n   * @param x x coord to move center position\n   * @param y y coord to move center position\n   * @param z z coord to move center position\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n  moveTo(x, y, z) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const offset = _v3A.set(x, y, z).sub(this._targetEnd);\n    this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);\n    this._needsUpdate = true;\n    if (!enableTransition) {\n      this._target.copy(this._targetEnd);\n    }\n    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.\n   * set `cover: true` to fill enter screen.\n   * e.g.\n   * ```\n   * cameraControls.fitToBox( myMesh );\n   * ```\n   * @param box3OrObject Axis aligned bounding box to fit the view.\n   * @param enableTransition Whether to move smoothly or immediately.\n   * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }\n   * @returns Transition end promise\n   * @category Methods\n   */\n  fitToBox(box3OrObject, enableTransition) {\n    let {\n      cover = false,\n      paddingLeft = 0,\n      paddingRight = 0,\n      paddingBottom = 0,\n      paddingTop = 0\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const promises = [];\n    const aabb = box3OrObject.isBox3 ? _box3A.copy(box3OrObject) : _box3A.setFromObject(box3OrObject);\n    if (aabb.isEmpty()) {\n      console.warn('camera-controls: fitTo() cannot be used with an empty box. Aborting');\n      Promise.resolve();\n    }\n    // round to closest axis ( forward | backward | right | left | top | bottom )\n    const theta = roundToStep(this._sphericalEnd.theta, PI_HALF);\n    const phi = roundToStep(this._sphericalEnd.phi, PI_HALF);\n    promises.push(this.rotateTo(theta, phi, enableTransition));\n    const normal = _v3A.setFromSpherical(this._sphericalEnd).normalize();\n    const rotation = _quaternionA.setFromUnitVectors(normal, _AXIS_Z);\n    const viewFromPolar = approxEquals(Math.abs(normal.y), 1);\n    if (viewFromPolar) {\n      rotation.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));\n    }\n    rotation.multiply(this._yAxisUpSpaceInverse);\n    // make oriented bounding box\n    const bb = _box3B.makeEmpty();\n    // left bottom back corner\n    _v3B.copy(aabb.min).applyQuaternion(rotation);\n    bb.expandByPoint(_v3B);\n    // right bottom back corner\n    _v3B.copy(aabb.min).setX(aabb.max.x).applyQuaternion(rotation);\n    bb.expandByPoint(_v3B);\n    // left top back corner\n    _v3B.copy(aabb.min).setY(aabb.max.y).applyQuaternion(rotation);\n    bb.expandByPoint(_v3B);\n    // right top back corner\n    _v3B.copy(aabb.max).setZ(aabb.min.z).applyQuaternion(rotation);\n    bb.expandByPoint(_v3B);\n    // left bottom front corner\n    _v3B.copy(aabb.min).setZ(aabb.max.z).applyQuaternion(rotation);\n    bb.expandByPoint(_v3B);\n    // right bottom front corner\n    _v3B.copy(aabb.max).setY(aabb.min.y).applyQuaternion(rotation);\n    bb.expandByPoint(_v3B);\n    // left top front corner\n    _v3B.copy(aabb.max).setX(aabb.min.x).applyQuaternion(rotation);\n    bb.expandByPoint(_v3B);\n    // right top front corner\n    _v3B.copy(aabb.max).applyQuaternion(rotation);\n    bb.expandByPoint(_v3B);\n    // add padding\n    bb.min.x -= paddingLeft;\n    bb.min.y -= paddingBottom;\n    bb.max.x += paddingRight;\n    bb.max.y += paddingTop;\n    rotation.setFromUnitVectors(_AXIS_Z, normal);\n    if (viewFromPolar) {\n      rotation.premultiply(_quaternionB.invert());\n    }\n    rotation.premultiply(this._yAxisUpSpace);\n    const bbSize = bb.getSize(_v3A);\n    const center = bb.getCenter(_v3B).applyQuaternion(rotation);\n    if (isPerspectiveCamera(this._camera)) {\n      const distance = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);\n      promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n      promises.push(this.dollyTo(distance, enableTransition));\n      promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n    } else if (isOrthographicCamera(this._camera)) {\n      const camera = this._camera;\n      const width = camera.right - camera.left;\n      const height = camera.top - camera.bottom;\n      const zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);\n      promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n      promises.push(this.zoomTo(zoom, enableTransition));\n      promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n    }\n    return Promise.all(promises);\n  }\n  /**\n   * Fit the viewport to the sphere or the bounding sphere of the object.\n   * @param sphereOrMesh\n   * @param enableTransition\n   * @category Methods\n   */\n  fitToSphere(sphereOrMesh, enableTransition) {\n    const promises = [];\n    const isSphere = sphereOrMesh instanceof THREE.Sphere;\n    const boundingSphere = isSphere ? _sphere.copy(sphereOrMesh) : createBoundingSphere(sphereOrMesh, _sphere);\n    promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));\n    if (isPerspectiveCamera(this._camera)) {\n      const distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);\n      promises.push(this.dollyTo(distanceToFit, enableTransition));\n    } else if (isOrthographicCamera(this._camera)) {\n      const width = this._camera.right - this._camera.left;\n      const height = this._camera.top - this._camera.bottom;\n      const diameter = 2 * boundingSphere.radius;\n      const zoom = Math.min(width / diameter, height / diameter);\n      promises.push(this.zoomTo(zoom, enableTransition));\n    }\n    promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n    return Promise.all(promises);\n  }\n  /**\n   * Make an orbit with given points.\n   * @param positionX\n   * @param positionY\n   * @param positionZ\n   * @param targetX\n   * @param targetY\n   * @param targetZ\n   * @param enableTransition\n   * @category Methods\n   */\n  setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ) {\n    let enableTransition = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    const target = _v3B.set(targetX, targetY, targetZ);\n    const position = _v3A.set(positionX, positionY, positionZ);\n    this._targetEnd.copy(target);\n    this._sphericalEnd.setFromVector3(position.sub(target).applyQuaternion(this._yAxisUpSpace));\n    this.normalizeRotations();\n    this._needsUpdate = true;\n    if (!enableTransition) {\n      this._target.copy(this._targetEnd);\n      this._spherical.copy(this._sphericalEnd);\n    }\n    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) && approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Similar to setLookAt, but it interpolates between two states.\n   * @param positionAX\n   * @param positionAY\n   * @param positionAZ\n   * @param targetAX\n   * @param targetAY\n   * @param targetAZ\n   * @param positionBX\n   * @param positionBY\n   * @param positionBZ\n   * @param targetBX\n   * @param targetBY\n   * @param targetBZ\n   * @param t\n   * @param enableTransition\n   * @category Methods\n   */\n  lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t) {\n    let enableTransition = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : false;\n    const targetA = _v3A.set(targetAX, targetAY, targetAZ);\n    const positionA = _v3B.set(positionAX, positionAY, positionAZ);\n    _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));\n    const targetB = _v3C.set(targetBX, targetBY, targetBZ);\n    const positionB = _v3B.set(positionBX, positionBY, positionBZ);\n    _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));\n    this._targetEnd.copy(targetA.lerp(targetB, t)); // tricky\n    const deltaTheta = _sphericalB.theta - _sphericalA.theta;\n    const deltaPhi = _sphericalB.phi - _sphericalA.phi;\n    const deltaRadius = _sphericalB.radius - _sphericalA.radius;\n    this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t, _sphericalA.phi + deltaPhi * t, _sphericalA.theta + deltaTheta * t);\n    this.normalizeRotations();\n    this._needsUpdate = true;\n    if (!enableTransition) {\n      this._target.copy(this._targetEnd);\n      this._spherical.copy(this._sphericalEnd);\n    }\n    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) && approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * setLookAt without target, keep gazing at the current target\n   * @param positionX\n   * @param positionY\n   * @param positionZ\n   * @param enableTransition\n   * @category Methods\n   */\n  setPosition(positionX, positionY, positionZ) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);\n  }\n  /**\n   * setLookAt without position, Stay still at the position.\n   * @param targetX\n   * @param targetY\n   * @param targetZ\n   * @param enableTransition\n   * @category Methods\n   */\n  setTarget(targetX, targetY, targetZ) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const pos = this.getPosition(_v3A);\n    const promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition);\n    // see https://github.com/yomotsu/camera-controls/issues/335\n    this._sphericalEnd.phi = THREE.MathUtils.clamp(this.polarAngle, this.minPolarAngle, this.maxPolarAngle);\n    return promise;\n  }\n  /**\n   * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.\n   * @param x\n   * @param y\n   * @param z\n   * @param enableTransition\n   * @category Methods\n   */\n  setFocalOffset(x, y, z) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this._focalOffsetEnd.set(x, y, z);\n    this._needsUpdate = true;\n    if (!enableTransition) {\n      this._focalOffset.copy(this._focalOffsetEnd);\n    }\n    this._affectOffset = !approxZero(this._focalOffset.x) || !approxZero(this._focalOffset.y) || !approxZero(this._focalOffset.z);\n    const resolveImmediately = !enableTransition || approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) && approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) && approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Set orbit point without moving the camera.\n   * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.\n   * @param targetX\n   * @param targetY\n   * @param targetZ\n   * @category Methods\n   */\n  setOrbitPoint(targetX, targetY, targetZ) {\n    this._camera.updateMatrixWorld();\n    _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);\n    _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);\n    _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n    const position = _v3A.set(targetX, targetY, targetZ);\n    const distance = position.distanceTo(this._camera.position);\n    const cameraToPoint = position.sub(this._camera.position);\n    _xColumn.multiplyScalar(cameraToPoint.x);\n    _yColumn.multiplyScalar(cameraToPoint.y);\n    _zColumn.multiplyScalar(cameraToPoint.z);\n    _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n    _v3A.z = _v3A.z + distance;\n    this.dollyTo(distance, false);\n    this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);\n    this.moveTo(targetX, targetY, targetZ, false);\n  }\n  /**\n   * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3\n   * @param box3\n   * @category Methods\n   */\n  setBoundary(box3) {\n    if (!box3) {\n      this._boundary.min.set(-Infinity, -Infinity, -Infinity);\n      this._boundary.max.set(Infinity, Infinity, Infinity);\n      this._needsUpdate = true;\n      return;\n    }\n    this._boundary.copy(box3);\n    this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n    this._needsUpdate = true;\n  }\n  /**\n   * Set (or unset) the current viewport.\n   * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.\n   * @param viewportOrX\n   * @param y\n   * @param width\n   * @param height\n   * @category Methods\n   */\n  setViewport(viewportOrX, y, width, height) {\n    if (viewportOrX === null) {\n      // null\n      this._viewport = null;\n      return;\n    }\n    this._viewport = this._viewport || new THREE.Vector4();\n    if (typeof viewportOrX === 'number') {\n      // number\n      this._viewport.set(viewportOrX, y, width, height);\n    } else {\n      // Vector4\n      this._viewport.copy(viewportOrX);\n    }\n  }\n  /**\n   * Calculate the distance to fit the box.\n   * @param width box width\n   * @param height box height\n   * @param depth box depth\n   * @returns distance\n   * @category Methods\n   */\n  getDistanceToFitBox(width, height, depth) {\n    let cover = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitBox')) return this._spherical.radius;\n    const boundingRectAspect = width / height;\n    const fov = this._camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD;\n    const aspect = this._camera.aspect;\n    const heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;\n    return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;\n  }\n  /**\n   * Calculate the distance to fit the sphere.\n   * @param radius sphere radius\n   * @returns distance\n   * @category Methods\n   */\n  getDistanceToFitSphere(radius) {\n    if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitSphere')) return this._spherical.radius;\n    // https://stackoverflow.com/a/44849975\n    const vFOV = this._camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD;\n    const hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;\n    const fov = 1 < this._camera.aspect ? vFOV : hFOV;\n    return radius / Math.sin(fov * 0.5);\n  }\n  /**\n   * Returns its current gazing target, which is the center position of the orbit.\n   * @param out current gazing target\n   * @category Methods\n   */\n  getTarget(out) {\n    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n    return _out.copy(this._targetEnd);\n  }\n  /**\n   * Returns its current position.\n   * @param out current position\n   * @category Methods\n   */\n  getPosition(out) {\n    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n    return _out.setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).add(this._targetEnd);\n  }\n  /**\n   * Returns its current focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n   * @param out current focal offset\n   * @category Methods\n   */\n  getFocalOffset(out) {\n    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n    return _out.copy(this._focalOffsetEnd);\n  }\n  /**\n   * Normalize camera azimuth angle rotation between 0 and 360 degrees.\n   * @category Methods\n   */\n  normalizeRotations() {\n    this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;\n    if (this._sphericalEnd.theta < 0) this._sphericalEnd.theta += PI_2;\n    this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);\n  }\n  /**\n   * Reset all rotation and position to defaults.\n   * @param enableTransition\n   * @category Methods\n   */\n  reset() {\n    let enableTransition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const promises = [this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition), this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition), this.zoomTo(this._zoom0, enableTransition)];\n    return Promise.all(promises);\n  }\n  /**\n   * Set current camera position as the default position.\n   * @category Methods\n   */\n  saveState() {\n    this.getTarget(this._target0);\n    this.getPosition(this._position0);\n    this._zoom0 = this._zoom;\n    this._focalOffset0.copy(this._focalOffset);\n  }\n  /**\n   * Sync camera-up direction.\n   * When camera-up vector is changed, `.updateCameraUp()` must be called.\n   * @category Methods\n   */\n  updateCameraUp() {\n    this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);\n    quatInvertCompat(this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace));\n  }\n  /**\n   * Update camera position and directions.\n   * This should be called in your tick loop every time, and returns true if re-rendering is needed.\n   * @param delta\n   * @returns updated\n   * @category Methods\n   */\n  update(delta) {\n    const dampingFactor = this._state === ACTION.NONE ? this.dampingFactor : this.draggingDampingFactor;\n    // The original THREE.OrbitControls assume 60 FPS fixed and does NOT rely on delta time.\n    // (that must be a problem of the original one though)\n    // To to emulate the speed of the original one under 60 FPS, multiply `60` to delta,\n    // but ours are more flexible to any FPS unlike the original.\n    const lerpRatio = Math.min(dampingFactor * delta * 60, 1);\n    const deltaTheta = this._sphericalEnd.theta - this._spherical.theta;\n    const deltaPhi = this._sphericalEnd.phi - this._spherical.phi;\n    const deltaRadius = this._sphericalEnd.radius - this._spherical.radius;\n    const deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);\n    const deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);\n    if (!approxZero(deltaTheta) || !approxZero(deltaPhi) || !approxZero(deltaRadius) || !approxZero(deltaTarget.x) || !approxZero(deltaTarget.y) || !approxZero(deltaTarget.z) || !approxZero(deltaOffset.x) || !approxZero(deltaOffset.y) || !approxZero(deltaOffset.z)) {\n      this._spherical.set(this._spherical.radius + deltaRadius * lerpRatio, this._spherical.phi + deltaPhi * lerpRatio, this._spherical.theta + deltaTheta * lerpRatio);\n      this._target.add(deltaTarget.multiplyScalar(lerpRatio));\n      this._focalOffset.add(deltaOffset.multiplyScalar(lerpRatio));\n      this._needsUpdate = true;\n    } else {\n      this._spherical.copy(this._sphericalEnd);\n      this._target.copy(this._targetEnd);\n      this._focalOffset.copy(this._focalOffsetEnd);\n    }\n    if (this._dollyControlAmount !== 0) {\n      if (isPerspectiveCamera(this._camera)) {\n        const camera = this._camera;\n        const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n        const planeX = _v3B.copy(cameraDirection).cross(camera.up).normalize();\n        if (planeX.lengthSq() === 0) planeX.x = 1.0;\n        const planeY = _v3C.crossVectors(planeX, cameraDirection);\n        const worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD * 0.5);\n        const prevRadius = this._sphericalEnd.radius - this._dollyControlAmount;\n        const lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;\n        const cursor = _v3A.copy(this._targetEnd).add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect)).add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));\n        this._targetEnd.lerp(cursor, lerpRatio);\n      } else if (isOrthographicCamera(this._camera)) {\n        const camera = this._camera;\n        const worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); //.sub( _v3B.set( this._focalOffset.x, this._focalOffset.y, 0 ) );\n        const quaternion = _v3B.set(0, 0, -1).applyQuaternion(camera.quaternion);\n        const cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(camera.up)));\n        const prevZoom = this._zoom - this._dollyControlAmount;\n        const lerpRatio = -(prevZoom - this._zoomEnd) / this._zoom;\n        // find the \"distance\" (aka plane constant in three.js) of Plane\n        // from a given position (this._targetEnd) and normal vector (cameraDirection)\n        // https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FEquationOfAPlaneNormal#bkmrk0\n        const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n        const prevPlaneConstant = this._targetEnd.dot(cameraDirection);\n        this._targetEnd.lerp(cursor, lerpRatio);\n        const newPlaneConstant = this._targetEnd.dot(cameraDirection);\n        // Pull back the camera depth that has moved, to be the camera stationary as zoom\n        const pullBack = cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);\n        this._targetEnd.sub(pullBack);\n      }\n      this._target.copy(this._targetEnd);\n      // target position may be moved beyond boundary.\n      this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n      this._dollyControlAmount = 0;\n    }\n    // zoom\n    const deltaZoom = this._zoomEnd - this._zoom;\n    this._zoom += deltaZoom * lerpRatio;\n    if (this._camera.zoom !== this._zoom) {\n      if (approxZero(deltaZoom)) this._zoom = this._zoomEnd;\n      this._camera.zoom = this._zoom;\n      this._camera.updateProjectionMatrix();\n      this._updateNearPlaneCorners();\n      this._needsUpdate = true;\n    }\n    // collision detection\n    const maxDistance = this._collisionTest();\n    this._spherical.radius = Math.min(this._spherical.radius, maxDistance);\n    // decompose spherical to the camera position\n    this._spherical.makeSafe();\n    this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);\n    this._camera.lookAt(this._target);\n    // set offset after the orbit movement\n    if (this._affectOffset) {\n      this._camera.updateMatrixWorld();\n      _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n      _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n      _zColumn.setFromMatrixColumn(this._camera.matrix, 2);\n      _xColumn.multiplyScalar(this._focalOffset.x);\n      _yColumn.multiplyScalar(-this._focalOffset.y);\n      _zColumn.multiplyScalar(this._focalOffset.z); // notice: z-offset will not affect in Orthographic.\n      _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n      this._camera.position.add(_v3A);\n    }\n    if (this._boundaryEnclosesCamera) {\n      this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1.0);\n    }\n    const updated = this._needsUpdate;\n    if (updated && !this._updatedLastTime) {\n      this._hasRested = false;\n      this.dispatchEvent({\n        type: 'wake'\n      });\n      this.dispatchEvent({\n        type: 'update'\n      });\n    } else if (updated) {\n      this.dispatchEvent({\n        type: 'update'\n      });\n      if (approxZero(deltaTheta, this.restThreshold) && approxZero(deltaPhi, this.restThreshold) && approxZero(deltaRadius, this.restThreshold) && approxZero(deltaTarget.x, this.restThreshold) && approxZero(deltaTarget.y, this.restThreshold) && approxZero(deltaTarget.z, this.restThreshold) && approxZero(deltaOffset.x, this.restThreshold) && approxZero(deltaOffset.y, this.restThreshold) && approxZero(deltaOffset.z, this.restThreshold) && approxZero(deltaZoom, this.restThreshold) && !this._hasRested) {\n        this._hasRested = true;\n        this.dispatchEvent({\n          type: 'rest'\n        });\n      }\n    } else if (!updated && this._updatedLastTime) {\n      this.dispatchEvent({\n        type: 'sleep'\n      });\n    }\n    this._updatedLastTime = updated;\n    this._needsUpdate = false;\n    return updated;\n  }\n  /**\n   * Get all state in JSON string\n   * @category Methods\n   */\n  toJSON() {\n    return JSON.stringify({\n      enabled: this._enabled,\n      minDistance: this.minDistance,\n      maxDistance: infinityToMaxNumber(this.maxDistance),\n      minZoom: this.minZoom,\n      maxZoom: infinityToMaxNumber(this.maxZoom),\n      minPolarAngle: this.minPolarAngle,\n      maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),\n      minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),\n      maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),\n      dampingFactor: this.dampingFactor,\n      draggingDampingFactor: this.draggingDampingFactor,\n      dollySpeed: this.dollySpeed,\n      truckSpeed: this.truckSpeed,\n      dollyToCursor: this.dollyToCursor,\n      verticalDragToForward: this.verticalDragToForward,\n      target: this._targetEnd.toArray(),\n      position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n      zoom: this._zoomEnd,\n      focalOffset: this._focalOffsetEnd.toArray(),\n      target0: this._target0.toArray(),\n      position0: this._position0.toArray(),\n      zoom0: this._zoom0,\n      focalOffset0: this._focalOffset0.toArray()\n    });\n  }\n  /**\n   * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.\n   * @param json\n   * @param enableTransition\n   * @category Methods\n   */\n  fromJSON(json) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const obj = JSON.parse(json);\n    const position = _v3A.fromArray(obj.position);\n    this.enabled = obj.enabled;\n    this.minDistance = obj.minDistance;\n    this.maxDistance = maxNumberToInfinity(obj.maxDistance);\n    this.minZoom = obj.minZoom;\n    this.maxZoom = maxNumberToInfinity(obj.maxZoom);\n    this.minPolarAngle = obj.minPolarAngle;\n    this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);\n    this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);\n    this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);\n    this.dampingFactor = obj.dampingFactor;\n    this.draggingDampingFactor = obj.draggingDampingFactor;\n    this.dollySpeed = obj.dollySpeed;\n    this.truckSpeed = obj.truckSpeed;\n    this.dollyToCursor = obj.dollyToCursor;\n    this.verticalDragToForward = obj.verticalDragToForward;\n    this._target0.fromArray(obj.target0);\n    this._position0.fromArray(obj.position0);\n    this._zoom0 = obj.zoom0;\n    this._focalOffset0.fromArray(obj.focalOffset0);\n    this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);\n    _sphericalA.setFromVector3(position.sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));\n    this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);\n    this.zoomTo(obj.zoom, enableTransition);\n    this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);\n    this._needsUpdate = true;\n  }\n  /**\n   * Attach all internal event handlers to enable drag control.\n   * @category Methods\n   */\n  connect(domElement) {\n    if (this._domElement) {\n      console.warn('camera-controls is already connected.');\n      return;\n    }\n    domElement.setAttribute('data-camera-controls-version', VERSION);\n    this._addAllEventListeners(domElement);\n  }\n  /**\n   * Detach all internal event handlers to disable drag control.\n   */\n  disconnect() {\n    this._removeAllEventListeners();\n    this._domElement = undefined;\n  }\n  /**\n   * Dispose the cameraControls instance itself, remove all eventListeners.\n   * @category Methods\n   */\n  dispose() {\n    this.disconnect();\n    if (this._domElement && 'setAttribute' in this._domElement) this._domElement.removeAttribute('data-camera-controls-version');\n  }\n  _findPointerById(pointerId) {\n    // to support IE11 use some instead of Array#find (will be removed when IE11 is deprecated)\n    let pointer = null;\n    this._activePointers.some(activePointer => {\n      if (activePointer.pointerId === pointerId) {\n        pointer = activePointer;\n        return true;\n      }\n      return false;\n    });\n    return pointer;\n  }\n  _encloseToBoundary(position, offset, friction) {\n    const offsetLength2 = offset.lengthSq();\n    if (offsetLength2 === 0.0) {\n      // sanity check\n      return position;\n    }\n    // See: https://twitter.com/FMS_Cat/status/1106508958640988161\n    const newTarget = _v3B.copy(offset).add(position); // target\n    const clampedTarget = this._boundary.clampPoint(newTarget, _v3C); // clamped target\n    const deltaClampedTarget = clampedTarget.sub(newTarget); // newTarget -> clampedTarget\n    const deltaClampedTargetLength2 = deltaClampedTarget.lengthSq(); // squared length of deltaClampedTarget\n    if (deltaClampedTargetLength2 === 0.0) {\n      // when the position doesn't have to be clamped\n      return position.add(offset);\n    } else if (deltaClampedTargetLength2 === offsetLength2) {\n      // when the position is completely stuck\n      return position;\n    } else if (friction === 0.0) {\n      return position.add(offset).add(deltaClampedTarget);\n    } else {\n      const offsetFactor = 1.0 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);\n      return position.add(_v3B.copy(offset).multiplyScalar(offsetFactor)).add(deltaClampedTarget.multiplyScalar(1.0 - friction));\n    }\n  }\n  _updateNearPlaneCorners() {\n    if (isPerspectiveCamera(this._camera)) {\n      const camera = this._camera;\n      const near = camera.near;\n      const fov = camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD;\n      const heightHalf = Math.tan(fov * 0.5) * near; // near plain half height\n      const widthHalf = heightHalf * camera.aspect; // near plain half width\n      this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);\n      this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);\n      this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);\n      this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);\n    } else if (isOrthographicCamera(this._camera)) {\n      const camera = this._camera;\n      const zoomInv = 1 / camera.zoom;\n      const left = camera.left * zoomInv;\n      const right = camera.right * zoomInv;\n      const top = camera.top * zoomInv;\n      const bottom = camera.bottom * zoomInv;\n      this._nearPlaneCorners[0].set(left, top, 0);\n      this._nearPlaneCorners[1].set(right, top, 0);\n      this._nearPlaneCorners[2].set(right, bottom, 0);\n      this._nearPlaneCorners[3].set(left, bottom, 0);\n    }\n  }\n  // lateUpdate\n  _collisionTest() {\n    let distance = Infinity;\n    const hasCollider = this.colliderMeshes.length >= 1;\n    if (!hasCollider) return distance;\n    if (notSupportedInOrthographicCamera(this._camera, '_collisionTest')) return distance;\n    // divide by distance to normalize, lighter than `Vector3.prototype.normalize()`\n    const direction = _v3A.setFromSpherical(this._spherical).divideScalar(this._spherical.radius);\n    _rotationMatrix.lookAt(_ORIGIN, direction, this._camera.up);\n    for (let i = 0; i < 4; i++) {\n      const nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i]);\n      nearPlaneCorner.applyMatrix4(_rotationMatrix);\n      const origin = _v3C.addVectors(this._target, nearPlaneCorner);\n      _raycaster.set(origin, direction);\n      _raycaster.far = this._spherical.radius + 1;\n      const intersects = _raycaster.intersectObjects(this.colliderMeshes);\n      if (intersects.length !== 0 && intersects[0].distance < distance) {\n        distance = intersects[0].distance;\n      }\n    }\n    return distance;\n  }\n  /**\n   * Get its client rect and package into given `DOMRect` .\n   */\n  _getClientRect(target) {\n    if (!this._domElement) return;\n    const rect = this._domElement.getBoundingClientRect();\n    target.x = rect.left;\n    target.y = rect.top;\n    if (this._viewport) {\n      target.x += this._viewport.x;\n      target.y += rect.height - this._viewport.w - this._viewport.y;\n      target.width = this._viewport.z;\n      target.height = this._viewport.w;\n    } else {\n      target.width = rect.width;\n      target.height = rect.height;\n    }\n    return target;\n  }\n  _createOnRestPromise(resolveImmediately) {\n    if (resolveImmediately) return Promise.resolve();\n    this._hasRested = false;\n    this.dispatchEvent({\n      type: 'transitionstart'\n    });\n    return new Promise(resolve => {\n      const onResolve = () => {\n        this.removeEventListener('rest', onResolve);\n        resolve();\n      };\n      this.addEventListener('rest', onResolve);\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _addAllEventListeners(_domElement) {}\n  _removeAllEventListeners() {}\n}\nfunction createBoundingSphere(object3d, out) {\n  const boundingSphere = out;\n  const center = boundingSphere.center;\n  _box3A.makeEmpty();\n  // find the center\n  object3d.traverseVisible(object => {\n    if (!object.isMesh) return;\n    _box3A.expandByObject(object);\n  });\n  _box3A.getCenter(center);\n  // find the radius\n  let maxRadiusSq = 0;\n  object3d.traverseVisible(object => {\n    if (!object.isMesh) return;\n    const mesh = object;\n    const geometry = mesh.geometry.clone();\n    geometry.applyMatrix4(mesh.matrixWorld);\n    if (geometry.isBufferGeometry) {\n      const bufferGeometry = geometry;\n      const position = bufferGeometry.attributes.position;\n      for (let i = 0, l = position.count; i < l; i++) {\n        _v3A.fromBufferAttribute(position, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_v3A));\n      }\n    } else {\n      // for old three.js, which supports both BufferGeometry and Geometry\n      // this condition block will be removed in the near future.\n      const position = geometry.attributes.position;\n      const vector = new THREE.Vector3();\n      for (let i = 0, l = position.count; i < l; i++) {\n        vector.fromBufferAttribute(position, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n      }\n    }\n  });\n  boundingSphere.radius = Math.sqrt(maxRadiusSq);\n  return boundingSphere;\n}\nexport { CameraControls as default };","map":{"version":3,"names":["MOUSE_BUTTON","LEFT","RIGHT","MIDDLE","ACTION","Object","freeze","NONE","ROTATE","TRUCK","OFFSET","DOLLY","ZOOM","TOUCH_ROTATE","TOUCH_TRUCK","TOUCH_OFFSET","TOUCH_DOLLY","TOUCH_ZOOM","TOUCH_DOLLY_TRUCK","TOUCH_DOLLY_OFFSET","TOUCH_DOLLY_ROTATE","TOUCH_ZOOM_TRUCK","TOUCH_ZOOM_OFFSET","TOUCH_ZOOM_ROTATE","isPerspectiveCamera","camera","isOrthographicCamera","PI_2","Math","PI","PI_HALF","EPSILON","approxZero","number","error","abs","approxEquals","a","b","roundToStep","value","step","round","infinityToMaxNumber","isFinite","Number","MAX_VALUE","maxNumberToInfinity","Infinity","extractClientCoordFromEvent","pointers","out","set","forEach","pointer","x","clientX","y","clientY","length","notSupportedInOrthographicCamera","message","console","warn","quatInvertCompat","target","invert","inverse","EventDispatcher","constructor","_listeners","addEventListener","type","listener","listeners","undefined","indexOf","push","removeEventListener","listenerArray","index","splice","removeAllEventListeners","Array","isArray","dispatchEvent","event","array","slice","i","l","call","VERSION","TOUCH_DOLLY_FACTOR","isBrowser","window","isMac","test","navigator","platform","isPointerEventsNotSupported","THREE","_ORIGIN","_AXIS_Y","_AXIS_Z","_v2","_v3A","_v3B","_v3C","_xColumn","_yColumn","_zColumn","_deltaTarget","_deltaOffset","_sphericalA","_sphericalB","_box3A","_box3B","_sphere","_quaternionA","_quaternionB","_rotationMatrix","_raycaster","CameraControls","install","libs","Vector3","Vector2","Spherical","Box3","Sphere","Quaternion","Matrix4","Raycaster","domElement","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","maxDistance","infinityDolly","minZoom","maxZoom","dampingFactor","draggingDampingFactor","azimuthRotateSpeed","polarRotateSpeed","dollySpeed","truckSpeed","dollyToCursor","dragToOffset","verticalDragToForward","boundaryFriction","restThreshold","colliderMeshes","cancel","_enabled","_state","_viewport","_affectOffset","_dollyControlAmount","_hasRested","_boundaryEnclosesCamera","_needsUpdate","_updatedLastTime","_elementRect","DOMRect","_activePointers","_truckInternal","deltaX","deltaY","_camera","offset","copy","position","sub","_target","fov","getEffectiveFOV","MathUtils","DEG2RAD","targetDistance","tan","truckX","height","pedestalY","setFocalOffset","_focalOffsetEnd","z","truck","forward","right","left","zoom","width","top","bottom","_rotateInternal","theta","phi","rotate","_dollyInternal","delta","dollyScale","pow","distance","_sphericalEnd","radius","prevRadius","signedPrevRadius","dollyTo","getWorldDirection","_targetEnd","add","normalize","multiplyScalar","_dollyControlCoord","_zoomInternal","zoomScale","prevZoom","_zoomEnd","zoomTo","_zoom","_yAxisUpSpace","setFromUnitVectors","up","_yAxisUpSpaceInverse","clone","_focalOffset","_spherical","setFromVector3","applyQuaternion","_nearPlaneCorners","_updateNearPlaneCorners","_boundary","_target0","_position0","_zoom0","_focalOffset0","mouseButtons","middle","wheel","touches","one","two","three","dragStartPosition","lastDragPosition","dollyStart","onPointerDown","_domElement","pointerId","ownerDocument","onPointerMove","passive","onPointerUp","startDragging","onMouseDown","onMouseMove","onMouseUp","onTouchStart","preventDefault","prototype","changedTouches","touch","identifier","onTouchMove","onTouchEnd","cancelable","_findPointerById","movementX","movementY","pointerType","buttons","dragging","endDragging","lastScrollTimeStamp","onMouseWheel","now","performance","_getClientRect","deltaYFactor","deltaMode","onContextMenu","isMultiTouch","dx","dy","sqrt","isPointerLockActive","document","pointerLockElement","dollyX","dollyY","dollyDelta","_addAllEventListeners","style","touchAction","userSelect","webkitUserSelect","_removeAllEventListeners","connect","update","updateCameraUp","updateProjectionMatrix","enabled","active","currentAction","azimuthAngle","polarAngle","boundaryEnclosesCamera","enableTransition","rotateTo","rotateAzimuthTo","rotatePolarTo","clamp","makeSafe","resolveImmediately","_createOnRestPromise","dolly","lastRadius","newRadius","hasCollider","maxDistanceByCollisionTest","_collisionTest","isCollided","isDollyIn","Promise","resolve","min","zoomStep","pan","updateMatrix","setFromMatrixColumn","matrix","to","moveTo","crossVectors","_encloseToBoundary","fitToBox","box3OrObject","cover","paddingLeft","paddingRight","paddingBottom","paddingTop","promises","aabb","isBox3","setFromObject","isEmpty","normal","setFromSpherical","rotation","viewFromPolar","multiply","setFromAxisAngle","bb","makeEmpty","expandByPoint","setX","max","setY","setZ","premultiply","bbSize","getSize","center","getCenter","getDistanceToFitBox","all","fitToSphere","sphereOrMesh","isSphere","boundingSphere","createBoundingSphere","distanceToFit","getDistanceToFitSphere","diameter","setLookAt","positionX","positionY","positionZ","targetX","targetY","targetZ","normalizeRotations","lerpLookAt","positionAX","positionAY","positionAZ","targetAX","targetAY","targetAZ","positionBX","positionBY","positionBZ","targetBX","targetBY","targetBZ","t","targetA","positionA","targetB","positionB","lerp","deltaTheta","deltaPhi","deltaRadius","setPosition","setTarget","pos","getPosition","promise","setOrbitPoint","updateMatrixWorld","matrixWorldInverse","distanceTo","cameraToPoint","setBoundary","box3","clampPoint","setViewport","viewportOrX","Vector4","depth","boundingRectAspect","aspect","heightToFit","vFOV","hFOV","atan","sin","getTarget","_out","isVector3","getFocalOffset","reset","saveState","lerpRatio","deltaTarget","subVectors","deltaOffset","cameraDirection","negate","planeX","cross","lengthSq","planeY","worldToScreen","cursor","worldCursorPosition","near","far","unproject","quaternion","dot","prevPlaneConstant","newPlaneConstant","pullBack","deltaZoom","lookAt","updated","toJSON","JSON","stringify","toArray","focalOffset","target0","position0","zoom0","focalOffset0","fromJSON","json","obj","parse","fromArray","setAttribute","disconnect","dispose","removeAttribute","some","activePointer","friction","offsetLength2","newTarget","clampedTarget","deltaClampedTarget","deltaClampedTargetLength2","offsetFactor","heightHalf","widthHalf","zoomInv","direction","divideScalar","nearPlaneCorner","applyMatrix4","origin","addVectors","intersects","intersectObjects","rect","getBoundingClientRect","w","onResolve","object3d","traverseVisible","object","isMesh","expandByObject","maxRadiusSq","mesh","geometry","matrixWorld","isBufferGeometry","bufferGeometry","attributes","count","fromBufferAttribute","distanceToSquared","vector","default"],"sources":["/Users/tumolabsstudent/Desktop/app/node_modules/camera-controls/dist/camera-controls.module.js"],"sourcesContent":["/*!\n * camera-controls\n * https://github.com/yomotsu/camera-controls\n * (c) 2017 @yomotsu\n * Released under the MIT License.\n */\n// see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#value\nconst MOUSE_BUTTON = {\n    LEFT: 1,\n    RIGHT: 2,\n    MIDDLE: 4,\n};\nconst ACTION = Object.freeze({\n    NONE: 0,\n    ROTATE: 1,\n    TRUCK: 2,\n    OFFSET: 4,\n    DOLLY: 8,\n    ZOOM: 16,\n    TOUCH_ROTATE: 32,\n    TOUCH_TRUCK: 64,\n    TOUCH_OFFSET: 128,\n    TOUCH_DOLLY: 256,\n    TOUCH_ZOOM: 512,\n    TOUCH_DOLLY_TRUCK: 1024,\n    TOUCH_DOLLY_OFFSET: 2048,\n    TOUCH_DOLLY_ROTATE: 4096,\n    TOUCH_ZOOM_TRUCK: 8192,\n    TOUCH_ZOOM_OFFSET: 16384,\n    TOUCH_ZOOM_ROTATE: 32768,\n});\nfunction isPerspectiveCamera(camera) {\n    return camera.isPerspectiveCamera;\n}\nfunction isOrthographicCamera(camera) {\n    return camera.isOrthographicCamera;\n}\n\nconst PI_2 = Math.PI * 2;\nconst PI_HALF = Math.PI / 2;\n\nconst EPSILON = 1e-5;\nfunction approxZero(number, error = EPSILON) {\n    return Math.abs(number) < error;\n}\nfunction approxEquals(a, b, error = EPSILON) {\n    return approxZero(a - b, error);\n}\nfunction roundToStep(value, step) {\n    return Math.round(value / step) * step;\n}\nfunction infinityToMaxNumber(value) {\n    if (isFinite(value))\n        return value;\n    if (value < 0)\n        return -Number.MAX_VALUE;\n    return Number.MAX_VALUE;\n}\nfunction maxNumberToInfinity(value) {\n    if (Math.abs(value) < Number.MAX_VALUE)\n        return value;\n    return value * Infinity;\n}\n\nfunction extractClientCoordFromEvent(pointers, out) {\n    out.set(0, 0);\n    pointers.forEach((pointer) => {\n        out.x += pointer.clientX;\n        out.y += pointer.clientY;\n    });\n    out.x /= pointers.length;\n    out.y /= pointers.length;\n}\n\nfunction notSupportedInOrthographicCamera(camera, message) {\n    if (isOrthographicCamera(camera)) {\n        console.warn(`${message} is not supported in OrthographicCamera`);\n        return true;\n    }\n    return false;\n}\n\n/**\n * A compat function for `Quaternion.invert()` / `Quaternion.inverse()`.\n * `Quaternion.invert()` is introduced in r123 and `Quaternion.inverse()` emits a warning.\n * We are going to use this compat for a while.\n * @param target A target quaternion\n */\nfunction quatInvertCompat(target) {\n    if (target.invert) {\n        target.invert();\n    }\n    else {\n        target.inverse();\n    }\n    return target;\n}\n\nclass EventDispatcher {\n    constructor() {\n        this._listeners = {};\n    }\n    /**\n     * Adds the specified event listener.\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    addEventListener(type, listener) {\n        const listeners = this._listeners;\n        if (listeners[type] === undefined)\n            listeners[type] = [];\n        if (listeners[type].indexOf(listener) === -1)\n            listeners[type].push(listener);\n    }\n    // hasEventListener( type: string, listener: Listener ): boolean {\n    // \tconst listeners = this._listeners;\n    // \treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n    // }\n    /**\n     * Removes the specified event listener\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    removeEventListener(type, listener) {\n        const listeners = this._listeners;\n        const listenerArray = listeners[type];\n        if (listenerArray !== undefined) {\n            const index = listenerArray.indexOf(listener);\n            if (index !== -1)\n                listenerArray.splice(index, 1);\n        }\n    }\n    /**\n     * Removes all event listeners\n     * @param type event name\n     * @category Methods\n     */\n    removeAllEventListeners(type) {\n        if (!type) {\n            this._listeners = {};\n            return;\n        }\n        if (Array.isArray(this._listeners[type]))\n            this._listeners[type].length = 0;\n    }\n    /**\n     * Fire an event type.\n     * @param event DispatcherEvent\n     * @category Methods\n     */\n    dispatchEvent(event) {\n        const listeners = this._listeners;\n        const listenerArray = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            const array = listenerArray.slice(0);\n            for (let i = 0, l = array.length; i < l; i++) {\n                array[i].call(this, event);\n            }\n        }\n    }\n}\n\nconst VERSION = '1.37.6'; // will be replaced with `version` in package.json during the build process.\nconst TOUCH_DOLLY_FACTOR = 1 / 8;\nconst isBrowser = typeof window !== 'undefined';\nconst isMac = isBrowser && /Mac/.test(navigator.platform);\nconst isPointerEventsNotSupported = !(isBrowser && 'PointerEvent' in window); // Safari 12 does not support PointerEvents API\nlet THREE;\nlet _ORIGIN;\nlet _AXIS_Y;\nlet _AXIS_Z;\nlet _v2;\nlet _v3A;\nlet _v3B;\nlet _v3C;\nlet _xColumn;\nlet _yColumn;\nlet _zColumn;\nlet _deltaTarget;\nlet _deltaOffset;\nlet _sphericalA;\nlet _sphericalB;\nlet _box3A;\nlet _box3B;\nlet _sphere;\nlet _quaternionA;\nlet _quaternionB;\nlet _rotationMatrix;\nlet _raycaster;\nclass CameraControls extends EventDispatcher {\n    /**\n     * Injects THREE as the dependency. You can then proceed to use CameraControls.\n     *\n     * e.g\n     * ```javascript\n     * CameraControls.install( { THREE: THREE } );\n     * ```\n     *\n     * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.\n     *\n     * ```js\n     * import {\n     * \tVector2,\n     * \tVector3,\n     * \tVector4,\n     * \tQuaternion,\n     * \tMatrix4,\n     * \tSpherical,\n     * \tBox3,\n     * \tSphere,\n     * \tRaycaster,\n     * \tMathUtils,\n     * } from 'three';\n     *\n     * const subsetOfTHREE = {\n     * \tVector2   : Vector2,\n     * \tVector3   : Vector3,\n     * \tVector4   : Vector4,\n     * \tQuaternion: Quaternion,\n     * \tMatrix4   : Matrix4,\n     * \tSpherical : Spherical,\n     * \tBox3      : Box3,\n     * \tSphere    : Sphere,\n     * \tRaycaster : Raycaster,\n     * \tMathUtils : {\n     * \t\tDEG2RAD: MathUtils.DEG2RAD,\n     * \t\tclamp: MathUtils.clamp,\n     * \t},\n     * };\n\n     * CameraControls.install( { THREE: subsetOfTHREE } );\n     * ```\n     * @category Statics\n     */\n    static install(libs) {\n        THREE = libs.THREE;\n        _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));\n        _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));\n        _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));\n        _v2 = new THREE.Vector2();\n        _v3A = new THREE.Vector3();\n        _v3B = new THREE.Vector3();\n        _v3C = new THREE.Vector3();\n        _xColumn = new THREE.Vector3();\n        _yColumn = new THREE.Vector3();\n        _zColumn = new THREE.Vector3();\n        _deltaTarget = new THREE.Vector3();\n        _deltaOffset = new THREE.Vector3();\n        _sphericalA = new THREE.Spherical();\n        _sphericalB = new THREE.Spherical();\n        _box3A = new THREE.Box3();\n        _box3B = new THREE.Box3();\n        _sphere = new THREE.Sphere();\n        _quaternionA = new THREE.Quaternion();\n        _quaternionB = new THREE.Quaternion();\n        _rotationMatrix = new THREE.Matrix4();\n        _raycaster = new THREE.Raycaster();\n    }\n    /**\n     * list all ACTIONs\n     * @category Statics\n     */\n    static get ACTION() {\n        return ACTION;\n    }\n    /**\n     * Creates a `CameraControls` instance.\n     *\n     * Note:\n     * You **must install** three.js before using camera-controls. see [#install](#install)\n     * Not doing so will lead to runtime errors (`undefined` references to THREE).\n     *\n     * e.g.\n     * ```\n     * CameraControls.install( { THREE } );\n     * const cameraControls = new CameraControls( camera, domElement );\n     * ```\n     *\n     * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.\n     * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.\n     * @category Constructor\n     */\n    constructor(camera, domElement) {\n        super();\n        /**\n         * Minimum vertical angle in radians.\n         * The angle has to be between `0` and `.maxPolarAngle` inclusive.\n         * The default value is `0`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxPolarAngle = 0;\n         * ```\n         * @category Properties\n         */\n        this.minPolarAngle = 0; // radians\n        /**\n         * Maximum vertical angle in radians.\n         * The angle has to be between `.maxPolarAngle` and `Math.PI` inclusive.\n         * The default value is `Math.PI`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxPolarAngle = Math.PI;\n         * ```\n         * @category Properties\n         */\n        this.maxPolarAngle = Math.PI; // radians\n        /**\n         * Minimum horizontal angle in radians.\n         * The angle has to be less than `.maxAzimuthAngle`.\n         * The default value is `- Infinity`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.minAzimuthAngle = - Infinity;\n         * ```\n         * @category Properties\n         */\n        this.minAzimuthAngle = -Infinity; // radians\n        /**\n         * Maximum horizontal angle in radians.\n         * The angle has to be greater than `.minAzimuthAngle`.\n         * The default value is `Infinity`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxAzimuthAngle = Infinity;\n         * ```\n         * @category Properties\n         */\n        this.maxAzimuthAngle = Infinity; // radians\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        /**\n         * Minimum distance for dolly. The value must be higher than `0`.\n         * PerspectiveCamera only.\n         * @category Properties\n         */\n        this.minDistance = 0;\n        /**\n         * Maximum distance for dolly. The value must be higher than `minDistance`.\n         * PerspectiveCamera only.\n         * @category Properties\n         */\n        this.maxDistance = Infinity;\n        /**\n         * `true` to enable Infinity Dolly.\n         * When the Dolly distance is less than the `minDistance`, radius of the sphere will be set `minDistance` automatically.\n         * @category Properties\n         */\n        this.infinityDolly = false;\n        /**\n         * Minimum camera zoom.\n         * @category Properties\n         */\n        this.minZoom = 0.01;\n        /**\n         * Maximum camera zoom.\n         * @category Properties\n         */\n        this.maxZoom = Infinity;\n        /**\n         * The damping inertia.\n         * The value must be between `Math.EPSILON` to `1` inclusive.\n         * Setting `1` to disable smooth transitions.\n         * @category Properties\n         */\n        this.dampingFactor = 0.05;\n        /**\n         * The damping inertia while dragging.\n         * The value must be between `Math.EPSILON` to `1` inclusive.\n         * Setting `1` to disable smooth transitions.\n         * @category Properties\n         */\n        this.draggingDampingFactor = 0.25;\n        /**\n         * Speed of azimuth (horizontal) rotation.\n         * @category Properties\n         */\n        this.azimuthRotateSpeed = 1.0;\n        /**\n         * Speed of polar (vertical) rotation.\n         * @category Properties\n         */\n        this.polarRotateSpeed = 1.0;\n        /**\n         * Speed of mouse-wheel dollying.\n         * @category Properties\n         */\n        this.dollySpeed = 1.0;\n        /**\n         * Speed of drag for truck and pedestal.\n         * @category Properties\n         */\n        this.truckSpeed = 2.0;\n        /**\n         * `true` to enable Dolly-in to the mouse cursor coords.\n         * @category Properties\n         */\n        this.dollyToCursor = false;\n        /**\n         * @category Properties\n         */\n        this.dragToOffset = false;\n        /**\n         * The same as `.screenSpacePanning` in three.js's OrbitControls.\n         * @category Properties\n         */\n        this.verticalDragToForward = false;\n        /**\n         * Friction ratio of the boundary.\n         * @category Properties\n         */\n        this.boundaryFriction = 0.0;\n        /**\n         * Controls how soon the `rest` event fires as the camera slows.\n         * @category Properties\n         */\n        this.restThreshold = 0.01;\n        /**\n         * An array of Meshes to collide with camera.\n         * Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n         * @category Properties\n         */\n        this.colliderMeshes = [];\n        /**\n         * Force cancel user dragging.\n         * @category Methods\n         */\n        // cancel will be overwritten in the constructor.\n        this.cancel = () => { };\n        this._enabled = true;\n        this._state = ACTION.NONE;\n        this._viewport = null;\n        this._affectOffset = false;\n        this._dollyControlAmount = 0;\n        this._hasRested = true;\n        this._boundaryEnclosesCamera = false;\n        this._needsUpdate = true;\n        this._updatedLastTime = false;\n        this._elementRect = new DOMRect();\n        this._activePointers = [];\n        this._truckInternal = (deltaX, deltaY, dragToOffset) => {\n            if (isPerspectiveCamera(this._camera)) {\n                const offset = _v3A.copy(this._camera.position).sub(this._target);\n                // half of the fov is center to top of screen\n                const fov = this._camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD;\n                const targetDistance = offset.length() * Math.tan(fov * 0.5);\n                const truckX = (this.truckSpeed * deltaX * targetDistance / this._elementRect.height);\n                const pedestalY = (this.truckSpeed * deltaY * targetDistance / this._elementRect.height);\n                if (this.verticalDragToForward) {\n                    dragToOffset ?\n                        this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y, this._focalOffsetEnd.z, true) :\n                        this.truck(truckX, 0, true);\n                    this.forward(-pedestalY, true);\n                }\n                else {\n                    dragToOffset ?\n                        this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) :\n                        this.truck(truckX, pedestalY, true);\n                }\n            }\n            else if (isOrthographicCamera(this._camera)) {\n                // orthographic\n                const camera = this._camera;\n                const truckX = deltaX * (camera.right - camera.left) / camera.zoom / this._elementRect.width;\n                const pedestalY = deltaY * (camera.top - camera.bottom) / camera.zoom / this._elementRect.height;\n                dragToOffset ?\n                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) :\n                    this.truck(truckX, pedestalY, true);\n            }\n        };\n        this._rotateInternal = (deltaX, deltaY) => {\n            const theta = PI_2 * this.azimuthRotateSpeed * deltaX / this._elementRect.height; // divide by *height* to refer the resolution\n            const phi = PI_2 * this.polarRotateSpeed * deltaY / this._elementRect.height;\n            this.rotate(theta, phi, true);\n        };\n        this._dollyInternal = (delta, x, y) => {\n            const dollyScale = Math.pow(0.95, -delta * this.dollySpeed);\n            const distance = this._sphericalEnd.radius * dollyScale;\n            const prevRadius = this._sphericalEnd.radius;\n            const signedPrevRadius = prevRadius * (delta >= 0 ? -1 : 1);\n            this.dollyTo(distance);\n            if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n                this._camera.getWorldDirection(_v3A);\n                this._targetEnd.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n                this._target.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n            }\n            if (this.dollyToCursor) {\n                this._dollyControlAmount += this._sphericalEnd.radius - prevRadius;\n                if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n                    this._dollyControlAmount -= signedPrevRadius;\n                }\n                this._dollyControlCoord.set(x, y);\n            }\n            return;\n        };\n        this._zoomInternal = (delta, x, y) => {\n            const zoomScale = Math.pow(0.95, delta * this.dollySpeed);\n            const prevZoom = this._zoomEnd;\n            // for both PerspectiveCamera and OrthographicCamera\n            this.zoomTo(this._zoom * zoomScale);\n            if (this.dollyToCursor) {\n                this._dollyControlAmount += this._zoomEnd - prevZoom;\n                this._dollyControlCoord.set(x, y);\n            }\n            return;\n        };\n        // Check if the user has installed THREE\n        if (typeof THREE === 'undefined') {\n            console.error('camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.');\n        }\n        this._camera = camera;\n        this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(this._camera.up, _AXIS_Y);\n        this._yAxisUpSpaceInverse = quatInvertCompat(this._yAxisUpSpace.clone());\n        this._state = ACTION.NONE;\n        // the location\n        this._target = new THREE.Vector3();\n        this._targetEnd = this._target.clone();\n        this._focalOffset = new THREE.Vector3();\n        this._focalOffsetEnd = this._focalOffset.clone();\n        // rotation\n        this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace));\n        this._sphericalEnd = this._spherical.clone();\n        this._zoom = this._camera.zoom;\n        this._zoomEnd = this._zoom;\n        // collisionTest uses nearPlane.s\n        this._nearPlaneCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n        ];\n        this._updateNearPlaneCorners();\n        // Target cannot move outside of this box\n        this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity));\n        // reset\n        this._target0 = this._target.clone();\n        this._position0 = this._camera.position.clone();\n        this._zoom0 = this._zoom;\n        this._focalOffset0 = this._focalOffset.clone();\n        this._dollyControlAmount = 0;\n        this._dollyControlCoord = new THREE.Vector2();\n        // configs\n        this.mouseButtons = {\n            left: ACTION.ROTATE,\n            middle: ACTION.DOLLY,\n            right: ACTION.TRUCK,\n            wheel: isPerspectiveCamera(this._camera) ? ACTION.DOLLY :\n                isOrthographicCamera(this._camera) ? ACTION.ZOOM :\n                    ACTION.NONE,\n        };\n        this.touches = {\n            one: ACTION.TOUCH_ROTATE,\n            two: isPerspectiveCamera(this._camera) ? ACTION.TOUCH_DOLLY_TRUCK :\n                isOrthographicCamera(this._camera) ? ACTION.TOUCH_ZOOM_TRUCK :\n                    ACTION.NONE,\n            three: ACTION.TOUCH_TRUCK,\n        };\n        const dragStartPosition = new THREE.Vector2();\n        const lastDragPosition = new THREE.Vector2();\n        const dollyStart = new THREE.Vector2();\n        const onPointerDown = (event) => {\n            if (!this._enabled || !this._domElement)\n                return;\n            // Don't call `event.preventDefault()` on the pointerdown event\n            // to keep receiving pointermove evens outside dragging iframe\n            // https://taye.me/blog/tips/2015/11/16/mouse-drag-outside-iframe/\n            const pointer = {\n                pointerId: event.pointerId,\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: 0,\n                deltaY: 0,\n            };\n            this._activePointers.push(pointer);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n            startDragging(event);\n        };\n        const onMouseDown = (event) => {\n            if (!this._enabled || !this._domElement)\n                return;\n            const pointer = {\n                pointerId: 0,\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: 0,\n                deltaY: 0,\n            };\n            this._activePointers.push(pointer);\n            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n            this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n            this._domElement.ownerDocument.addEventListener('mousemove', onMouseMove);\n            this._domElement.ownerDocument.addEventListener('mouseup', onMouseUp);\n            startDragging(event);\n        };\n        const onTouchStart = (event) => {\n            if (!this._enabled || !this._domElement)\n                return;\n            event.preventDefault();\n            Array.prototype.forEach.call(event.changedTouches, (touch) => {\n                const pointer = {\n                    pointerId: touch.identifier,\n                    clientX: touch.clientX,\n                    clientY: touch.clientY,\n                    deltaX: 0,\n                    deltaY: 0,\n                };\n                this._activePointers.push(pointer);\n            });\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('touchmove', onTouchMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('touchend', onTouchEnd);\n            this._domElement.ownerDocument.addEventListener('touchmove', onTouchMove, { passive: false });\n            this._domElement.ownerDocument.addEventListener('touchend', onTouchEnd);\n            startDragging(event);\n        };\n        const onPointerMove = (event) => {\n            if (event.cancelable)\n                event.preventDefault();\n            const pointerId = event.pointerId;\n            const pointer = this._findPointerById(pointerId);\n            if (!pointer)\n                return;\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            pointer.deltaX = event.movementX;\n            pointer.deltaY = event.movementY;\n            if (event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                this._state = 0;\n                if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                    this._state = this._state | this.mouseButtons.left;\n                }\n                if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                    this._state = this._state | this.mouseButtons.middle;\n                }\n                if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                    this._state = this._state | this.mouseButtons.right;\n                }\n            }\n            dragging();\n        };\n        const onMouseMove = (event) => {\n            const pointer = this._findPointerById(0);\n            if (!pointer)\n                return;\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            pointer.deltaX = event.movementX;\n            pointer.deltaY = event.movementY;\n            this._state = 0;\n            if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                this._state = this._state | this.mouseButtons.left;\n            }\n            if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                this._state = this._state | this.mouseButtons.middle;\n            }\n            if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                this._state = this._state | this.mouseButtons.right;\n            }\n            dragging();\n        };\n        const onTouchMove = (event) => {\n            if (event.cancelable)\n                event.preventDefault();\n            Array.prototype.forEach.call(event.changedTouches, (touch) => {\n                const pointerId = touch.identifier;\n                const pointer = this._findPointerById(pointerId);\n                if (!pointer)\n                    return;\n                pointer.clientX = touch.clientX;\n                pointer.clientY = touch.clientY;\n                // touch event does not have movementX and movementY.\n            });\n            dragging();\n        };\n        const onPointerUp = (event) => {\n            const pointerId = event.pointerId;\n            const pointer = this._findPointerById(pointerId);\n            pointer && this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n            if (event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 0:\n                        this._state = ACTION.NONE;\n                        break;\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                this._state = ACTION.NONE;\n            }\n            endDragging();\n        };\n        const onMouseUp = () => {\n            const pointer = this._findPointerById(0);\n            pointer && this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n            this._state = ACTION.NONE;\n            endDragging();\n        };\n        const onTouchEnd = (event) => {\n            Array.prototype.forEach.call(event.changedTouches, (touch) => {\n                const pointerId = touch.identifier;\n                const pointer = this._findPointerById(pointerId);\n                pointer && this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n            });\n            switch (this._activePointers.length) {\n                case 0:\n                    this._state = ACTION.NONE;\n                    break;\n                case 1:\n                    this._state = this.touches.one;\n                    break;\n                case 2:\n                    this._state = this.touches.two;\n                    break;\n                case 3:\n                    this._state = this.touches.three;\n                    break;\n            }\n            endDragging();\n        };\n        let lastScrollTimeStamp = -1;\n        const onMouseWheel = (event) => {\n            if (!this._enabled || this.mouseButtons.wheel === ACTION.NONE)\n                return;\n            event.preventDefault();\n            if (this.dollyToCursor ||\n                this.mouseButtons.wheel === ACTION.ROTATE ||\n                this.mouseButtons.wheel === ACTION.TRUCK) {\n                const now = performance.now();\n                // only need to fire this at scroll start.\n                if (lastScrollTimeStamp - now < 1000)\n                    this._getClientRect(this._elementRect);\n                lastScrollTimeStamp = now;\n            }\n            // Ref: https://github.com/cedricpinson/osgjs/blob/00e5a7e9d9206c06fdde0436e1d62ab7cb5ce853/sources/osgViewer/input/source/InputSourceMouse.js#L89-L103\n            const deltaYFactor = isMac ? -1 : -3;\n            const delta = (event.deltaMode === 1) ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);\n            const x = this.dollyToCursor ? (event.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n            const y = this.dollyToCursor ? (event.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n            switch (this.mouseButtons.wheel) {\n                case ACTION.ROTATE: {\n                    this._rotateInternal(event.deltaX, event.deltaY);\n                    break;\n                }\n                case ACTION.TRUCK: {\n                    this._truckInternal(event.deltaX, event.deltaY, false);\n                    break;\n                }\n                case ACTION.OFFSET: {\n                    this._truckInternal(event.deltaX, event.deltaY, true);\n                    break;\n                }\n                case ACTION.DOLLY: {\n                    this._dollyInternal(-delta, x, y);\n                    break;\n                }\n                case ACTION.ZOOM: {\n                    this._zoomInternal(-delta, x, y);\n                    break;\n                }\n            }\n            this.dispatchEvent({ type: 'control' });\n        };\n        const onContextMenu = (event) => {\n            if (!this._enabled)\n                return;\n            event.preventDefault();\n        };\n        const startDragging = (event) => {\n            if (!this._enabled)\n                return;\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            this._getClientRect(this._elementRect);\n            dragStartPosition.copy(_v2);\n            lastDragPosition.copy(_v2);\n            const isMultiTouch = this._activePointers.length >= 2;\n            if (isMultiTouch) {\n                // 2 finger pinch\n                const dx = _v2.x - this._activePointers[1].clientX;\n                const dy = _v2.y - this._activePointers[1].clientY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                dollyStart.set(0, distance);\n                // center coords of 2 finger truck\n                const x = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5;\n                const y = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;\n                lastDragPosition.set(x, y);\n            }\n            if ('touches' in event ||\n                'pointerType' in event && event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                this._state = 0;\n                if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                    this._state = this._state | this.mouseButtons.left;\n                }\n                if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                    this._state = this._state | this.mouseButtons.middle;\n                }\n                if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                    this._state = this._state | this.mouseButtons.right;\n                }\n            }\n            this.dispatchEvent({ type: 'controlstart' });\n        };\n        const dragging = () => {\n            if (!this._enabled)\n                return;\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            // When pointer lock is enabled clientX, clientY, screenX, and screenY remain 0.\n            // If pointer lock is enabled, use the Delta directory, and assume active-pointer is not multiple.\n            const isPointerLockActive = this._domElement && document.pointerLockElement === this._domElement;\n            const deltaX = isPointerLockActive ? -this._activePointers[0].deltaX : lastDragPosition.x - _v2.x;\n            const deltaY = isPointerLockActive ? -this._activePointers[0].deltaY : lastDragPosition.y - _v2.y;\n            lastDragPosition.copy(_v2);\n            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._rotateInternal(deltaX, deltaY);\n            }\n            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n                (this._state & ACTION.ZOOM) === ACTION.ZOOM) {\n                const dollyX = this.dollyToCursor ? (dragStartPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n                const dollyY = this.dollyToCursor ? (dragStartPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                (this._state & ACTION.DOLLY) === ACTION.DOLLY ?\n                    this._dollyInternal(deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY) :\n                    this._zoomInternal(deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n            }\n            if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                const dx = _v2.x - this._activePointers[1].clientX;\n                const dy = _v2.y - this._activePointers[1].clientY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                const dollyDelta = dollyStart.y - distance;\n                dollyStart.set(0, distance);\n                const dollyX = this.dollyToCursor ? (lastDragPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n                const dollyY = this.dollyToCursor ? (lastDragPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                (this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                    (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                    (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                    (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ?\n                    this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY) :\n                    this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n            }\n            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n                this._truckInternal(deltaX, deltaY, false);\n            }\n            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n                this._truckInternal(deltaX, deltaY, true);\n            }\n            this.dispatchEvent({ type: 'control' });\n        };\n        const endDragging = () => {\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            lastDragPosition.copy(_v2);\n            if (this._activePointers.length === 0 && this._domElement) {\n                // eslint-disable-next-line no-undef\n                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n                // eslint-disable-next-line no-undef\n                this._domElement.ownerDocument.removeEventListener('touchmove', onTouchMove, { passive: false });\n                this._domElement.ownerDocument.removeEventListener('touchend', onTouchEnd);\n                this.dispatchEvent({ type: 'controlend' });\n            }\n        };\n        this._addAllEventListeners = (domElement) => {\n            this._domElement = domElement;\n            this._domElement.style.touchAction = 'none';\n            this._domElement.style.userSelect = 'none';\n            this._domElement.style.webkitUserSelect = 'none';\n            this._domElement.addEventListener('pointerdown', onPointerDown);\n            isPointerEventsNotSupported && this._domElement.addEventListener('mousedown', onMouseDown);\n            isPointerEventsNotSupported && this._domElement.addEventListener('touchstart', onTouchStart);\n            this._domElement.addEventListener('pointercancel', onPointerUp);\n            this._domElement.addEventListener('wheel', onMouseWheel, { passive: false });\n            this._domElement.addEventListener('contextmenu', onContextMenu);\n        };\n        this._removeAllEventListeners = () => {\n            if (!this._domElement)\n                return;\n            this._domElement.removeEventListener('pointerdown', onPointerDown);\n            this._domElement.removeEventListener('mousedown', onMouseDown);\n            this._domElement.removeEventListener('touchstart', onTouchStart);\n            this._domElement.removeEventListener('pointercancel', onPointerUp);\n            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal\n            // > it's probably wise to use the same values used for the call to `addEventListener()` when calling `removeEventListener()`\n            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n            // eslint-disable-next-line no-undef\n            this._domElement.removeEventListener('wheel', onMouseWheel, { passive: false });\n            this._domElement.removeEventListener('contextmenu', onContextMenu);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('touchmove', onTouchMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n            this._domElement.ownerDocument.removeEventListener('touchend', onTouchEnd);\n        };\n        this.cancel = () => {\n            if (this._state === ACTION.NONE)\n                return;\n            this._state = ACTION.NONE;\n            this._activePointers.length = 0;\n            endDragging();\n        };\n        if (domElement)\n            this.connect(domElement);\n        this.update(0);\n    }\n    /**\n     * The camera to be controlled\n     * @category Properties\n     */\n    get camera() {\n        return this._camera;\n    }\n    set camera(camera) {\n        this._camera = camera;\n        this.updateCameraUp();\n        this._camera.updateProjectionMatrix();\n        this._updateNearPlaneCorners();\n        this._needsUpdate = true;\n    }\n    /**\n     * Whether or not the controls are enabled.\n     * `false` to disable user dragging/touch-move, but all methods works.\n     * @category Properties\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(enabled) {\n        if (!this._domElement)\n            return;\n        this._enabled = enabled;\n        if (enabled) {\n            this._domElement.style.touchAction = 'none';\n            this._domElement.style.userSelect = 'none';\n            this._domElement.style.webkitUserSelect = 'none';\n        }\n        else {\n            this.cancel();\n            this._domElement.style.touchAction = '';\n            this._domElement.style.userSelect = '';\n            this._domElement.style.webkitUserSelect = '';\n        }\n    }\n    /**\n     * Returns `true` if the controls are active updating.\n     * readonly value.\n     * @category Properties\n     */\n    get active() {\n        return !this._hasRested;\n    }\n    /**\n     * Getter for the current `ACTION`.\n     * readonly value.\n     * @category Properties\n     */\n    get currentAction() {\n        return this._state;\n    }\n    /**\n     * get/set Current distance.\n     * @category Properties\n     */\n    get distance() {\n        return this._spherical.radius;\n    }\n    set distance(distance) {\n        if (this._spherical.radius === distance &&\n            this._sphericalEnd.radius === distance)\n            return;\n        this._spherical.radius = distance;\n        this._sphericalEnd.radius = distance;\n        this._needsUpdate = true;\n    }\n    // horizontal angle\n    /**\n     * get/set the azimuth angle (horizontal) in radians.\n     * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.\n     * @category Properties\n     */\n    get azimuthAngle() {\n        return this._spherical.theta;\n    }\n    set azimuthAngle(azimuthAngle) {\n        if (this._spherical.theta === azimuthAngle &&\n            this._sphericalEnd.theta === azimuthAngle)\n            return;\n        this._spherical.theta = azimuthAngle;\n        this._sphericalEnd.theta = azimuthAngle;\n        this._needsUpdate = true;\n    }\n    // vertical angle\n    /**\n     * get/set the polar angle (vertical) in radians.\n     * @category Properties\n     */\n    get polarAngle() {\n        return this._spherical.phi;\n    }\n    set polarAngle(polarAngle) {\n        if (this._spherical.phi === polarAngle &&\n            this._sphericalEnd.phi === polarAngle)\n            return;\n        this._spherical.phi = polarAngle;\n        this._sphericalEnd.phi = polarAngle;\n        this._needsUpdate = true;\n    }\n    /**\n     * Whether camera position should be enclosed in the boundary or not.\n     * @category Properties\n     */\n    get boundaryEnclosesCamera() {\n        return this._boundaryEnclosesCamera;\n    }\n    set boundaryEnclosesCamera(boundaryEnclosesCamera) {\n        this._boundaryEnclosesCamera = boundaryEnclosesCamera;\n        this._needsUpdate = true;\n    }\n    /**\n     * Adds the specified event listener.\n     * Applicable event types (which is `K`) are:\n     * | Event name          | Timing |\n     * | ------------------- | ------ |\n     * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |\n     * | `'control'`         | When the user controls the camera (dragging). |\n     * | `'controlend'`      | When the user ends to control the camera. ¹ |\n     * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |\n     * | `'update'`          | When the camera position is updated. |\n     * | `'wake'`            | When the camera starts moving. |\n     * | `'rest'`            | When the camera movement is below `.restThreshold` ². |\n     * | `'sleep'`           | When the camera end moving. |\n     *\n     * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n     * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).\n     *\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    addEventListener(type, listener) {\n        super.addEventListener(type, listener);\n    }\n    /**\n     * Removes the specified event listener\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    removeEventListener(type, listener) {\n        super.removeEventListener(type, listener);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical).\n     * Every value is added to the current value.\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotate(azimuthAngle, polarAngle, enableTransition = false) {\n        return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotateAzimuthTo(azimuthAngle, enableTransition = false) {\n        return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);\n    }\n    /**\n     * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotatePolarTo(polarAngle, enableTransition = false) {\n        return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.\n     * Camera view will rotate over the orbit pivot absolutely:\n     *\n     * azimuthAngle\n     * ```\n     *       0º\n     *         \\\n     * 90º -----+----- -90º\n     *           \\\n     *           180º\n     * ```\n     * | direction | angle                  |\n     * | --------- | ---------------------- |\n     * | front     | 0º                     |\n     * | left      | 90º (`Math.PI / 2`)    |\n     * | right     | -90º (`- Math.PI / 2`) |\n     * | back      | 180º (`Math.PI`)       |\n     *\n     * polarAngle\n     * ```\n     *     180º\n     *      |\n     *      90º\n     *      |\n     *      0º\n     * ```\n     * | direction            | angle                  |\n     * | -------------------- | ---------------------- |\n     * | top/sky              | 180º (`Math.PI`)       |\n     * | horizontal from view | 90º (`Math.PI / 2`)    |\n     * | bottom/floor         | 0º                     |\n     *\n     * @param azimuthAngle Azimuth rotate angle to. In radian.\n     * @param polarAngle Polar rotate angle to. In radian.\n     * @param enableTransition  Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotateTo(azimuthAngle, polarAngle, enableTransition = false) {\n        const theta = THREE.MathUtils.clamp(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);\n        const phi = THREE.MathUtils.clamp(polarAngle, this.minPolarAngle, this.maxPolarAngle);\n        this._sphericalEnd.theta = theta;\n        this._sphericalEnd.phi = phi;\n        this._sphericalEnd.makeSafe();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._spherical.theta = this._sphericalEnd.theta;\n            this._spherical.phi = this._sphericalEnd.phi;\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Dolly in/out camera position.\n     * @param distance Distance of dollyIn. Negative number for dollyOut.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dolly(distance, enableTransition = false) {\n        return this.dollyTo(this._sphericalEnd.radius - distance, enableTransition);\n    }\n    /**\n     * Dolly in/out camera position to given distance.\n     * @param distance Distance of dolly.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dollyTo(distance, enableTransition = false) {\n        const lastRadius = this._sphericalEnd.radius;\n        const newRadius = THREE.MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n        const hasCollider = this.colliderMeshes.length >= 1;\n        if (hasCollider) {\n            const maxDistanceByCollisionTest = this._collisionTest();\n            const isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);\n            const isDollyIn = lastRadius > newRadius;\n            if (!isDollyIn && isCollided)\n                return Promise.resolve();\n            this._sphericalEnd.radius = Math.min(newRadius, maxDistanceByCollisionTest);\n        }\n        else {\n            this._sphericalEnd.radius = newRadius;\n        }\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._spherical.radius = this._sphericalEnd.radius;\n        }\n        const resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Zoom in/out camera. The value is added to camera zoom.\n     * Limits set with `.minZoom` and `.maxZoom`\n     * @param zoomStep zoom scale\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    zoom(zoomStep, enableTransition = false) {\n        return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);\n    }\n    /**\n     * Zoom in/out camera to given scale. The value overwrites camera zoom.\n     * Limits set with .minZoom and .maxZoom\n     * @param zoom\n     * @param enableTransition\n     * @category Methods\n     */\n    zoomTo(zoom, enableTransition = false) {\n        this._zoomEnd = THREE.MathUtils.clamp(zoom, this.minZoom, this.maxZoom);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._zoom = this._zoomEnd;\n        }\n        const resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * @deprecated `pan()` has been renamed to `truck()`\n     * @category Methods\n     */\n    pan(x, y, enableTransition = false) {\n        console.warn('`pan` has been renamed to `truck`');\n        return this.truck(x, y, enableTransition);\n    }\n    /**\n     * Truck and pedestal camera using current azimuthal angle\n     * @param x Horizontal translate amount\n     * @param y Vertical translate amount\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    truck(x, y, enableTransition = false) {\n        this._camera.updateMatrix();\n        _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n        _xColumn.multiplyScalar(x);\n        _yColumn.multiplyScalar(-y);\n        const offset = _v3A.copy(_xColumn).add(_yColumn);\n        const to = _v3B.copy(this._targetEnd).add(offset);\n        return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move forward / backward.\n     * @param distance Amount to move forward / backward. Negative value to move backward\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    forward(distance, enableTransition = false) {\n        _v3A.setFromMatrixColumn(this._camera.matrix, 0);\n        _v3A.crossVectors(this._camera.up, _v3A);\n        _v3A.multiplyScalar(distance);\n        const to = _v3B.copy(this._targetEnd).add(_v3A);\n        return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move target position to given point.\n     * @param x x coord to move center position\n     * @param y y coord to move center position\n     * @param z z coord to move center position\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    moveTo(x, y, z, enableTransition = false) {\n        const offset = _v3A.set(x, y, z).sub(this._targetEnd);\n        this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.\n     * set `cover: true` to fill enter screen.\n     * e.g.\n     * ```\n     * cameraControls.fitToBox( myMesh );\n     * ```\n     * @param box3OrObject Axis aligned bounding box to fit the view.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }\n     * @returns Transition end promise\n     * @category Methods\n     */\n    fitToBox(box3OrObject, enableTransition, { cover = false, paddingLeft = 0, paddingRight = 0, paddingBottom = 0, paddingTop = 0 } = {}) {\n        const promises = [];\n        const aabb = box3OrObject.isBox3\n            ? _box3A.copy(box3OrObject)\n            : _box3A.setFromObject(box3OrObject);\n        if (aabb.isEmpty()) {\n            console.warn('camera-controls: fitTo() cannot be used with an empty box. Aborting');\n            Promise.resolve();\n        }\n        // round to closest axis ( forward | backward | right | left | top | bottom )\n        const theta = roundToStep(this._sphericalEnd.theta, PI_HALF);\n        const phi = roundToStep(this._sphericalEnd.phi, PI_HALF);\n        promises.push(this.rotateTo(theta, phi, enableTransition));\n        const normal = _v3A.setFromSpherical(this._sphericalEnd).normalize();\n        const rotation = _quaternionA.setFromUnitVectors(normal, _AXIS_Z);\n        const viewFromPolar = approxEquals(Math.abs(normal.y), 1);\n        if (viewFromPolar) {\n            rotation.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));\n        }\n        rotation.multiply(this._yAxisUpSpaceInverse);\n        // make oriented bounding box\n        const bb = _box3B.makeEmpty();\n        // left bottom back corner\n        _v3B.copy(aabb.min).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right bottom back corner\n        _v3B.copy(aabb.min).setX(aabb.max.x).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left top back corner\n        _v3B.copy(aabb.min).setY(aabb.max.y).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right top back corner\n        _v3B.copy(aabb.max).setZ(aabb.min.z).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left bottom front corner\n        _v3B.copy(aabb.min).setZ(aabb.max.z).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right bottom front corner\n        _v3B.copy(aabb.max).setY(aabb.min.y).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left top front corner\n        _v3B.copy(aabb.max).setX(aabb.min.x).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right top front corner\n        _v3B.copy(aabb.max).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // add padding\n        bb.min.x -= paddingLeft;\n        bb.min.y -= paddingBottom;\n        bb.max.x += paddingRight;\n        bb.max.y += paddingTop;\n        rotation.setFromUnitVectors(_AXIS_Z, normal);\n        if (viewFromPolar) {\n            rotation.premultiply(_quaternionB.invert());\n        }\n        rotation.premultiply(this._yAxisUpSpace);\n        const bbSize = bb.getSize(_v3A);\n        const center = bb.getCenter(_v3B).applyQuaternion(rotation);\n        if (isPerspectiveCamera(this._camera)) {\n            const distance = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);\n            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n            promises.push(this.dollyTo(distance, enableTransition));\n            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const camera = this._camera;\n            const width = camera.right - camera.left;\n            const height = camera.top - camera.bottom;\n            const zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);\n            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n            promises.push(this.zoomTo(zoom, enableTransition));\n            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * Fit the viewport to the sphere or the bounding sphere of the object.\n     * @param sphereOrMesh\n     * @param enableTransition\n     * @category Methods\n     */\n    fitToSphere(sphereOrMesh, enableTransition) {\n        const promises = [];\n        const isSphere = sphereOrMesh instanceof THREE.Sphere;\n        const boundingSphere = isSphere ?\n            _sphere.copy(sphereOrMesh) :\n            createBoundingSphere(sphereOrMesh, _sphere);\n        promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));\n        if (isPerspectiveCamera(this._camera)) {\n            const distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);\n            promises.push(this.dollyTo(distanceToFit, enableTransition));\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const width = this._camera.right - this._camera.left;\n            const height = this._camera.top - this._camera.bottom;\n            const diameter = 2 * boundingSphere.radius;\n            const zoom = Math.min(width / diameter, height / diameter);\n            promises.push(this.zoomTo(zoom, enableTransition));\n        }\n        promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        return Promise.all(promises);\n    }\n    /**\n     * Make an orbit with given points.\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ, enableTransition = false) {\n        const target = _v3B.set(targetX, targetY, targetZ);\n        const position = _v3A.set(positionX, positionY, positionZ);\n        this._targetEnd.copy(target);\n        this._sphericalEnd.setFromVector3(position.sub(target).applyQuaternion(this._yAxisUpSpace));\n        this.normalizeRotations();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n            this._spherical.copy(this._sphericalEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Similar to setLookAt, but it interpolates between two states.\n     * @param positionAX\n     * @param positionAY\n     * @param positionAZ\n     * @param targetAX\n     * @param targetAY\n     * @param targetAZ\n     * @param positionBX\n     * @param positionBY\n     * @param positionBZ\n     * @param targetBX\n     * @param targetBY\n     * @param targetBZ\n     * @param t\n     * @param enableTransition\n     * @category Methods\n     */\n    lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t, enableTransition = false) {\n        const targetA = _v3A.set(targetAX, targetAY, targetAZ);\n        const positionA = _v3B.set(positionAX, positionAY, positionAZ);\n        _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));\n        const targetB = _v3C.set(targetBX, targetBY, targetBZ);\n        const positionB = _v3B.set(positionBX, positionBY, positionBZ);\n        _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));\n        this._targetEnd.copy(targetA.lerp(targetB, t)); // tricky\n        const deltaTheta = _sphericalB.theta - _sphericalA.theta;\n        const deltaPhi = _sphericalB.phi - _sphericalA.phi;\n        const deltaRadius = _sphericalB.radius - _sphericalA.radius;\n        this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t, _sphericalA.phi + deltaPhi * t, _sphericalA.theta + deltaTheta * t);\n        this.normalizeRotations();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n            this._spherical.copy(this._sphericalEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * setLookAt without target, keep gazing at the current target\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setPosition(positionX, positionY, positionZ, enableTransition = false) {\n        return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);\n    }\n    /**\n     * setLookAt without position, Stay still at the position.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setTarget(targetX, targetY, targetZ, enableTransition = false) {\n        const pos = this.getPosition(_v3A);\n        const promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition);\n        // see https://github.com/yomotsu/camera-controls/issues/335\n        this._sphericalEnd.phi = THREE.MathUtils.clamp(this.polarAngle, this.minPolarAngle, this.maxPolarAngle);\n        return promise;\n    }\n    /**\n     * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.\n     * @param x\n     * @param y\n     * @param z\n     * @param enableTransition\n     * @category Methods\n     */\n    setFocalOffset(x, y, z, enableTransition = false) {\n        this._focalOffsetEnd.set(x, y, z);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._focalOffset.copy(this._focalOffsetEnd);\n        }\n        this._affectOffset =\n            !approxZero(this._focalOffset.x) ||\n                !approxZero(this._focalOffset.y) ||\n                !approxZero(this._focalOffset.z);\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) &&\n                approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) &&\n                approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set orbit point without moving the camera.\n     * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @category Methods\n     */\n    setOrbitPoint(targetX, targetY, targetZ) {\n        this._camera.updateMatrixWorld();\n        _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);\n        _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n        const position = _v3A.set(targetX, targetY, targetZ);\n        const distance = position.distanceTo(this._camera.position);\n        const cameraToPoint = position.sub(this._camera.position);\n        _xColumn.multiplyScalar(cameraToPoint.x);\n        _yColumn.multiplyScalar(cameraToPoint.y);\n        _zColumn.multiplyScalar(cameraToPoint.z);\n        _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n        _v3A.z = _v3A.z + distance;\n        this.dollyTo(distance, false);\n        this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);\n        this.moveTo(targetX, targetY, targetZ, false);\n    }\n    /**\n     * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3\n     * @param box3\n     * @category Methods\n     */\n    setBoundary(box3) {\n        if (!box3) {\n            this._boundary.min.set(-Infinity, -Infinity, -Infinity);\n            this._boundary.max.set(Infinity, Infinity, Infinity);\n            this._needsUpdate = true;\n            return;\n        }\n        this._boundary.copy(box3);\n        this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n        this._needsUpdate = true;\n    }\n    /**\n     * Set (or unset) the current viewport.\n     * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.\n     * @param viewportOrX\n     * @param y\n     * @param width\n     * @param height\n     * @category Methods\n     */\n    setViewport(viewportOrX, y, width, height) {\n        if (viewportOrX === null) { // null\n            this._viewport = null;\n            return;\n        }\n        this._viewport = this._viewport || new THREE.Vector4();\n        if (typeof viewportOrX === 'number') { // number\n            this._viewport.set(viewportOrX, y, width, height);\n        }\n        else { // Vector4\n            this._viewport.copy(viewportOrX);\n        }\n    }\n    /**\n     * Calculate the distance to fit the box.\n     * @param width box width\n     * @param height box height\n     * @param depth box depth\n     * @returns distance\n     * @category Methods\n     */\n    getDistanceToFitBox(width, height, depth, cover = false) {\n        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitBox'))\n            return this._spherical.radius;\n        const boundingRectAspect = width / height;\n        const fov = this._camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD;\n        const aspect = this._camera.aspect;\n        const heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;\n        return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;\n    }\n    /**\n     * Calculate the distance to fit the sphere.\n     * @param radius sphere radius\n     * @returns distance\n     * @category Methods\n     */\n    getDistanceToFitSphere(radius) {\n        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitSphere'))\n            return this._spherical.radius;\n        // https://stackoverflow.com/a/44849975\n        const vFOV = this._camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD;\n        const hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;\n        const fov = 1 < this._camera.aspect ? vFOV : hFOV;\n        return radius / (Math.sin(fov * 0.5));\n    }\n    /**\n     * Returns its current gazing target, which is the center position of the orbit.\n     * @param out current gazing target\n     * @category Methods\n     */\n    getTarget(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.copy(this._targetEnd);\n    }\n    /**\n     * Returns its current position.\n     * @param out current position\n     * @category Methods\n     */\n    getPosition(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).add(this._targetEnd);\n    }\n    /**\n     * Returns its current focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n     * @param out current focal offset\n     * @category Methods\n     */\n    getFocalOffset(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.copy(this._focalOffsetEnd);\n    }\n    /**\n     * Normalize camera azimuth angle rotation between 0 and 360 degrees.\n     * @category Methods\n     */\n    normalizeRotations() {\n        this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;\n        if (this._sphericalEnd.theta < 0)\n            this._sphericalEnd.theta += PI_2;\n        this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);\n    }\n    /**\n     * Reset all rotation and position to defaults.\n     * @param enableTransition\n     * @category Methods\n     */\n    reset(enableTransition = false) {\n        const promises = [\n            this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition),\n            this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition),\n            this.zoomTo(this._zoom0, enableTransition),\n        ];\n        return Promise.all(promises);\n    }\n    /**\n     * Set current camera position as the default position.\n     * @category Methods\n     */\n    saveState() {\n        this.getTarget(this._target0);\n        this.getPosition(this._position0);\n        this._zoom0 = this._zoom;\n        this._focalOffset0.copy(this._focalOffset);\n    }\n    /**\n     * Sync camera-up direction.\n     * When camera-up vector is changed, `.updateCameraUp()` must be called.\n     * @category Methods\n     */\n    updateCameraUp() {\n        this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);\n        quatInvertCompat(this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace));\n    }\n    /**\n     * Update camera position and directions.\n     * This should be called in your tick loop every time, and returns true if re-rendering is needed.\n     * @param delta\n     * @returns updated\n     * @category Methods\n     */\n    update(delta) {\n        const dampingFactor = this._state === ACTION.NONE ? this.dampingFactor : this.draggingDampingFactor;\n        // The original THREE.OrbitControls assume 60 FPS fixed and does NOT rely on delta time.\n        // (that must be a problem of the original one though)\n        // To to emulate the speed of the original one under 60 FPS, multiply `60` to delta,\n        // but ours are more flexible to any FPS unlike the original.\n        const lerpRatio = Math.min(dampingFactor * delta * 60, 1);\n        const deltaTheta = this._sphericalEnd.theta - this._spherical.theta;\n        const deltaPhi = this._sphericalEnd.phi - this._spherical.phi;\n        const deltaRadius = this._sphericalEnd.radius - this._spherical.radius;\n        const deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);\n        const deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);\n        if (!approxZero(deltaTheta) ||\n            !approxZero(deltaPhi) ||\n            !approxZero(deltaRadius) ||\n            !approxZero(deltaTarget.x) ||\n            !approxZero(deltaTarget.y) ||\n            !approxZero(deltaTarget.z) ||\n            !approxZero(deltaOffset.x) ||\n            !approxZero(deltaOffset.y) ||\n            !approxZero(deltaOffset.z)) {\n            this._spherical.set(this._spherical.radius + deltaRadius * lerpRatio, this._spherical.phi + deltaPhi * lerpRatio, this._spherical.theta + deltaTheta * lerpRatio);\n            this._target.add(deltaTarget.multiplyScalar(lerpRatio));\n            this._focalOffset.add(deltaOffset.multiplyScalar(lerpRatio));\n            this._needsUpdate = true;\n        }\n        else {\n            this._spherical.copy(this._sphericalEnd);\n            this._target.copy(this._targetEnd);\n            this._focalOffset.copy(this._focalOffsetEnd);\n        }\n        if (this._dollyControlAmount !== 0) {\n            if (isPerspectiveCamera(this._camera)) {\n                const camera = this._camera;\n                const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n                const planeX = _v3B.copy(cameraDirection).cross(camera.up).normalize();\n                if (planeX.lengthSq() === 0)\n                    planeX.x = 1.0;\n                const planeY = _v3C.crossVectors(planeX, cameraDirection);\n                const worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD * 0.5);\n                const prevRadius = this._sphericalEnd.radius - this._dollyControlAmount;\n                const lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;\n                const cursor = _v3A.copy(this._targetEnd)\n                    .add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect))\n                    .add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));\n                this._targetEnd.lerp(cursor, lerpRatio);\n            }\n            else if (isOrthographicCamera(this._camera)) {\n                const camera = this._camera;\n                const worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); //.sub( _v3B.set( this._focalOffset.x, this._focalOffset.y, 0 ) );\n                const quaternion = _v3B.set(0, 0, -1).applyQuaternion(camera.quaternion);\n                const cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(camera.up)));\n                const prevZoom = this._zoom - this._dollyControlAmount;\n                const lerpRatio = -(prevZoom - this._zoomEnd) / this._zoom;\n                // find the \"distance\" (aka plane constant in three.js) of Plane\n                // from a given position (this._targetEnd) and normal vector (cameraDirection)\n                // https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FEquationOfAPlaneNormal#bkmrk0\n                const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n                const prevPlaneConstant = this._targetEnd.dot(cameraDirection);\n                this._targetEnd.lerp(cursor, lerpRatio);\n                const newPlaneConstant = this._targetEnd.dot(cameraDirection);\n                // Pull back the camera depth that has moved, to be the camera stationary as zoom\n                const pullBack = cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);\n                this._targetEnd.sub(pullBack);\n            }\n            this._target.copy(this._targetEnd);\n            // target position may be moved beyond boundary.\n            this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n            this._dollyControlAmount = 0;\n        }\n        // zoom\n        const deltaZoom = this._zoomEnd - this._zoom;\n        this._zoom += deltaZoom * lerpRatio;\n        if (this._camera.zoom !== this._zoom) {\n            if (approxZero(deltaZoom))\n                this._zoom = this._zoomEnd;\n            this._camera.zoom = this._zoom;\n            this._camera.updateProjectionMatrix();\n            this._updateNearPlaneCorners();\n            this._needsUpdate = true;\n        }\n        // collision detection\n        const maxDistance = this._collisionTest();\n        this._spherical.radius = Math.min(this._spherical.radius, maxDistance);\n        // decompose spherical to the camera position\n        this._spherical.makeSafe();\n        this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);\n        this._camera.lookAt(this._target);\n        // set offset after the orbit movement\n        if (this._affectOffset) {\n            this._camera.updateMatrixWorld();\n            _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n            _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n            _zColumn.setFromMatrixColumn(this._camera.matrix, 2);\n            _xColumn.multiplyScalar(this._focalOffset.x);\n            _yColumn.multiplyScalar(-this._focalOffset.y);\n            _zColumn.multiplyScalar(this._focalOffset.z); // notice: z-offset will not affect in Orthographic.\n            _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n            this._camera.position.add(_v3A);\n        }\n        if (this._boundaryEnclosesCamera) {\n            this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1.0);\n        }\n        const updated = this._needsUpdate;\n        if (updated && !this._updatedLastTime) {\n            this._hasRested = false;\n            this.dispatchEvent({ type: 'wake' });\n            this.dispatchEvent({ type: 'update' });\n        }\n        else if (updated) {\n            this.dispatchEvent({ type: 'update' });\n            if (approxZero(deltaTheta, this.restThreshold) &&\n                approxZero(deltaPhi, this.restThreshold) &&\n                approxZero(deltaRadius, this.restThreshold) &&\n                approxZero(deltaTarget.x, this.restThreshold) &&\n                approxZero(deltaTarget.y, this.restThreshold) &&\n                approxZero(deltaTarget.z, this.restThreshold) &&\n                approxZero(deltaOffset.x, this.restThreshold) &&\n                approxZero(deltaOffset.y, this.restThreshold) &&\n                approxZero(deltaOffset.z, this.restThreshold) &&\n                approxZero(deltaZoom, this.restThreshold) &&\n                !this._hasRested) {\n                this._hasRested = true;\n                this.dispatchEvent({ type: 'rest' });\n            }\n        }\n        else if (!updated && this._updatedLastTime) {\n            this.dispatchEvent({ type: 'sleep' });\n        }\n        this._updatedLastTime = updated;\n        this._needsUpdate = false;\n        return updated;\n    }\n    /**\n     * Get all state in JSON string\n     * @category Methods\n     */\n    toJSON() {\n        return JSON.stringify({\n            enabled: this._enabled,\n            minDistance: this.minDistance,\n            maxDistance: infinityToMaxNumber(this.maxDistance),\n            minZoom: this.minZoom,\n            maxZoom: infinityToMaxNumber(this.maxZoom),\n            minPolarAngle: this.minPolarAngle,\n            maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),\n            minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),\n            maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),\n            dampingFactor: this.dampingFactor,\n            draggingDampingFactor: this.draggingDampingFactor,\n            dollySpeed: this.dollySpeed,\n            truckSpeed: this.truckSpeed,\n            dollyToCursor: this.dollyToCursor,\n            verticalDragToForward: this.verticalDragToForward,\n            target: this._targetEnd.toArray(),\n            position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n            zoom: this._zoomEnd,\n            focalOffset: this._focalOffsetEnd.toArray(),\n            target0: this._target0.toArray(),\n            position0: this._position0.toArray(),\n            zoom0: this._zoom0,\n            focalOffset0: this._focalOffset0.toArray(),\n        });\n    }\n    /**\n     * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.\n     * @param json\n     * @param enableTransition\n     * @category Methods\n     */\n    fromJSON(json, enableTransition = false) {\n        const obj = JSON.parse(json);\n        const position = _v3A.fromArray(obj.position);\n        this.enabled = obj.enabled;\n        this.minDistance = obj.minDistance;\n        this.maxDistance = maxNumberToInfinity(obj.maxDistance);\n        this.minZoom = obj.minZoom;\n        this.maxZoom = maxNumberToInfinity(obj.maxZoom);\n        this.minPolarAngle = obj.minPolarAngle;\n        this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);\n        this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);\n        this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);\n        this.dampingFactor = obj.dampingFactor;\n        this.draggingDampingFactor = obj.draggingDampingFactor;\n        this.dollySpeed = obj.dollySpeed;\n        this.truckSpeed = obj.truckSpeed;\n        this.dollyToCursor = obj.dollyToCursor;\n        this.verticalDragToForward = obj.verticalDragToForward;\n        this._target0.fromArray(obj.target0);\n        this._position0.fromArray(obj.position0);\n        this._zoom0 = obj.zoom0;\n        this._focalOffset0.fromArray(obj.focalOffset0);\n        this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);\n        _sphericalA.setFromVector3(position.sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));\n        this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);\n        this.zoomTo(obj.zoom, enableTransition);\n        this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);\n        this._needsUpdate = true;\n    }\n    /**\n     * Attach all internal event handlers to enable drag control.\n     * @category Methods\n     */\n    connect(domElement) {\n        if (this._domElement) {\n            console.warn('camera-controls is already connected.');\n            return;\n        }\n        domElement.setAttribute('data-camera-controls-version', VERSION);\n        this._addAllEventListeners(domElement);\n    }\n    /**\n     * Detach all internal event handlers to disable drag control.\n     */\n    disconnect() {\n        this._removeAllEventListeners();\n        this._domElement = undefined;\n    }\n    /**\n     * Dispose the cameraControls instance itself, remove all eventListeners.\n     * @category Methods\n     */\n    dispose() {\n        this.disconnect();\n        if (this._domElement && 'setAttribute' in this._domElement)\n            this._domElement.removeAttribute('data-camera-controls-version');\n    }\n    _findPointerById(pointerId) {\n        // to support IE11 use some instead of Array#find (will be removed when IE11 is deprecated)\n        let pointer = null;\n        this._activePointers.some((activePointer) => {\n            if (activePointer.pointerId === pointerId) {\n                pointer = activePointer;\n                return true;\n            }\n            return false;\n        });\n        return pointer;\n    }\n    _encloseToBoundary(position, offset, friction) {\n        const offsetLength2 = offset.lengthSq();\n        if (offsetLength2 === 0.0) { // sanity check\n            return position;\n        }\n        // See: https://twitter.com/FMS_Cat/status/1106508958640988161\n        const newTarget = _v3B.copy(offset).add(position); // target\n        const clampedTarget = this._boundary.clampPoint(newTarget, _v3C); // clamped target\n        const deltaClampedTarget = clampedTarget.sub(newTarget); // newTarget -> clampedTarget\n        const deltaClampedTargetLength2 = deltaClampedTarget.lengthSq(); // squared length of deltaClampedTarget\n        if (deltaClampedTargetLength2 === 0.0) { // when the position doesn't have to be clamped\n            return position.add(offset);\n        }\n        else if (deltaClampedTargetLength2 === offsetLength2) { // when the position is completely stuck\n            return position;\n        }\n        else if (friction === 0.0) {\n            return position.add(offset).add(deltaClampedTarget);\n        }\n        else {\n            const offsetFactor = 1.0 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);\n            return position\n                .add(_v3B.copy(offset).multiplyScalar(offsetFactor))\n                .add(deltaClampedTarget.multiplyScalar(1.0 - friction));\n        }\n    }\n    _updateNearPlaneCorners() {\n        if (isPerspectiveCamera(this._camera)) {\n            const camera = this._camera;\n            const near = camera.near;\n            const fov = camera.getEffectiveFOV() * THREE.MathUtils.DEG2RAD;\n            const heightHalf = Math.tan(fov * 0.5) * near; // near plain half height\n            const widthHalf = heightHalf * camera.aspect; // near plain half width\n            this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);\n            this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);\n            this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);\n            this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const camera = this._camera;\n            const zoomInv = 1 / camera.zoom;\n            const left = camera.left * zoomInv;\n            const right = camera.right * zoomInv;\n            const top = camera.top * zoomInv;\n            const bottom = camera.bottom * zoomInv;\n            this._nearPlaneCorners[0].set(left, top, 0);\n            this._nearPlaneCorners[1].set(right, top, 0);\n            this._nearPlaneCorners[2].set(right, bottom, 0);\n            this._nearPlaneCorners[3].set(left, bottom, 0);\n        }\n    }\n    // lateUpdate\n    _collisionTest() {\n        let distance = Infinity;\n        const hasCollider = this.colliderMeshes.length >= 1;\n        if (!hasCollider)\n            return distance;\n        if (notSupportedInOrthographicCamera(this._camera, '_collisionTest'))\n            return distance;\n        // divide by distance to normalize, lighter than `Vector3.prototype.normalize()`\n        const direction = _v3A.setFromSpherical(this._spherical).divideScalar(this._spherical.radius);\n        _rotationMatrix.lookAt(_ORIGIN, direction, this._camera.up);\n        for (let i = 0; i < 4; i++) {\n            const nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i]);\n            nearPlaneCorner.applyMatrix4(_rotationMatrix);\n            const origin = _v3C.addVectors(this._target, nearPlaneCorner);\n            _raycaster.set(origin, direction);\n            _raycaster.far = this._spherical.radius + 1;\n            const intersects = _raycaster.intersectObjects(this.colliderMeshes);\n            if (intersects.length !== 0 && intersects[0].distance < distance) {\n                distance = intersects[0].distance;\n            }\n        }\n        return distance;\n    }\n    /**\n     * Get its client rect and package into given `DOMRect` .\n     */\n    _getClientRect(target) {\n        if (!this._domElement)\n            return;\n        const rect = this._domElement.getBoundingClientRect();\n        target.x = rect.left;\n        target.y = rect.top;\n        if (this._viewport) {\n            target.x += this._viewport.x;\n            target.y += rect.height - this._viewport.w - this._viewport.y;\n            target.width = this._viewport.z;\n            target.height = this._viewport.w;\n        }\n        else {\n            target.width = rect.width;\n            target.height = rect.height;\n        }\n        return target;\n    }\n    _createOnRestPromise(resolveImmediately) {\n        if (resolveImmediately)\n            return Promise.resolve();\n        this._hasRested = false;\n        this.dispatchEvent({ type: 'transitionstart' });\n        return new Promise((resolve) => {\n            const onResolve = () => {\n                this.removeEventListener('rest', onResolve);\n                resolve();\n            };\n            this.addEventListener('rest', onResolve);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _addAllEventListeners(_domElement) { }\n    _removeAllEventListeners() { }\n}\nfunction createBoundingSphere(object3d, out) {\n    const boundingSphere = out;\n    const center = boundingSphere.center;\n    _box3A.makeEmpty();\n    // find the center\n    object3d.traverseVisible((object) => {\n        if (!object.isMesh)\n            return;\n        _box3A.expandByObject(object);\n    });\n    _box3A.getCenter(center);\n    // find the radius\n    let maxRadiusSq = 0;\n    object3d.traverseVisible((object) => {\n        if (!object.isMesh)\n            return;\n        const mesh = object;\n        const geometry = mesh.geometry.clone();\n        geometry.applyMatrix4(mesh.matrixWorld);\n        if (geometry.isBufferGeometry) {\n            const bufferGeometry = geometry;\n            const position = bufferGeometry.attributes.position;\n            for (let i = 0, l = position.count; i < l; i++) {\n                _v3A.fromBufferAttribute(position, i);\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_v3A));\n            }\n        }\n        else {\n            // for old three.js, which supports both BufferGeometry and Geometry\n            // this condition block will be removed in the near future.\n            const position = geometry.attributes.position;\n            const vector = new THREE.Vector3();\n            for (let i = 0, l = position.count; i < l; i++) {\n                vector.fromBufferAttribute(position, i);\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n            }\n        }\n    });\n    boundingSphere.radius = Math.sqrt(maxRadiusSq);\n    return boundingSphere;\n}\n\nexport { CameraControls as default };\n"],"mappings":"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EAAE;IACP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC,CAAC;IACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG5G,IAAI,CAACC,EAAE,CAAC,CAAC;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAAC4G,eAAe,GAAG,CAACzF,QAAQ,CAAC,CAAC;IAClC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAAC0F,eAAe,GAAG1F,QAAQ,CAAC,CAAC;IACjC;IACA;AACR;AACA;AACA;AACA;IACQ,IAAI,CAAC2F,WAAW,GAAG,CAAC;IACpB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,WAAW,GAAG5F,QAAQ;IAC3B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAAC6F,aAAa,GAAG,KAAK;IAC1B;AACR;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;AACR;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG/F,QAAQ;IACvB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACgG,aAAa,GAAG,IAAI;IACzB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,IAAI;IACjC;AACR;AACA;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,GAAG;IAC7B;AACR;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,GAAG;IAC3B;AACR;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,GAAG;IACrB;AACR;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,GAAG;IACrB;AACR;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,KAAK;IAC1B;AACR;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB;AACR;AACA;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,KAAK;IAClC;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}