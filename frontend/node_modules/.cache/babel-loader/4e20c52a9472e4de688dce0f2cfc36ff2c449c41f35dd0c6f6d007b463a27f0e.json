{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { UniformsUtils, ShaderMaterial, LuminanceFormat, MathUtils, DataTexture, RedFormat, FloatType } from 'three';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\nclass GlitchPass extends Pass {\n  constructor() {\n    let dt_size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 64;\n    super();\n    _defineProperty(this, \"material\", void 0);\n    _defineProperty(this, \"fsQuad\", void 0);\n    _defineProperty(this, \"goWild\", void 0);\n    _defineProperty(this, \"curF\", void 0);\n    _defineProperty(this, \"randX\", void 0);\n    _defineProperty(this, \"uniforms\", void 0);\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms);\n    this.uniforms['tDisp'].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */) {\n    if (renderer.capabilities.isWebGL2 === false) this.uniforms['tDisp'].value.format = LuminanceFormat;\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['seed'].value = Math.random(); //default seeding\n\n    this.uniforms['byp'].value = 0;\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms['amount'].value = Math.random() / 30;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms['amount'].value = Math.random() / 90;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms['byp'].value = 1;\n    }\n    this.curF++;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n}\nexport { GlitchPass };","map":{"version":3,"names":["_defineProperty","Pass","FullScreenQuad","UniformsUtils","ShaderMaterial","LuminanceFormat","MathUtils","DataTexture","RedFormat","FloatType","DigitalGlitch","GlitchPass","constructor","dt_size","uniforms","clone","value","generateHeightmap","material","vertexShader","fragmentShader","fsQuad","goWild","curF","generateTrigger","render","renderer","writeBuffer","readBuffer","capabilities","isWebGL2","format","texture","Math","random","randX","randFloat","PI","renderToScreen","setRenderTarget","clear","randInt","data_arr","Float32Array","length","i","val","needsUpdate"],"sources":["/Users/tumolabsstudent/Desktop/app/node_modules/three-stdlib/postprocessing/GlitchPass.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { UniformsUtils, ShaderMaterial, LuminanceFormat, MathUtils, DataTexture, RedFormat, FloatType } from 'three';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nclass GlitchPass extends Pass {\n  constructor(dt_size = 64) {\n    super();\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"goWild\", void 0);\n\n    _defineProperty(this, \"curF\", void 0);\n\n    _defineProperty(this, \"randX\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms);\n    this.uniforms['tDisp'].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    if (renderer.capabilities.isWebGL2 === false) this.uniforms['tDisp'].value.format = LuminanceFormat;\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['seed'].value = Math.random(); //default seeding\n\n    this.uniforms['byp'].value = 0;\n\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms['amount'].value = Math.random() / 30;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms['amount'].value = Math.random() / 90;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms['byp'].value = 1;\n    }\n\n    this.curF++;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n\n}\n\nexport { GlitchPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}