{"ast":null,"code":"var _jsxFileName = \"/Users/tumolabsstudent/Desktop/app/src/App.tsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\nimport React, { useRef } from \"react\";\nimport \"./Skybox\";\nimport { Canvas } from \"@react-three/fiber\";\nimport \"./Skybox.scss\";\nimport \"./App.css\";\nimport { OrbitControls } from '@react-three/drei';\nimport { Plane } from \"@react-three/drei\";\n// import { DoubleSide, Mesh } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// function Box(props:any) {\n//   const mesh = useRef<Mesh>(null!);\n\n//   // mesh.current.rotation.x += Math.PI / 2;\n//   // useFrame((state, delta) => (mesh.current.rotation.z += delta))\n\n//   return (\n//      <mesh castShadow receiveShadow {...props} ref={mesh} position={[0,0.5,0]}>\n//         <boxGeometry args={[0.5, 0.8, 0.8]} />\n//         <meshBasicMaterial attach=\"material\" color={\"red\"} />\n//      </mesh>\n//   );\n// }\n\n// function Plane(props:any) {\n//   const mesh = useRef<Mesh>(null!);\n\n//   // mesh.current.rotation.x += Math.PI / 2;\n//   // useFrame((state, delta) => (mesh.current.rotation.z += delta))\n\n//   return (\n//     <mesh castShadow receiveShadow {...props} ref={mesh} rotation={[-Math.PI/2, 0, 0]}>\n//       <planeGeometry args={[7, 7]}/>\n//       <meshBasicMaterial color=\"grey\" side={DoubleSide} />\n//     </mesh>\n//   );\n// }\n\nexport default function App(props) {\n  _s();\n  const orbitControlsRef = useRef(null);\n  // const ballRef = useRef(null);\n  const boxRef = useRef();\n  return (\n    /*#__PURE__*/\n    // <div> \n    _jsxDEV(Canvas, {\n      shadows: true,\n      className: \"skybox\",\n      children: [/*#__PURE__*/_jsxDEV(\"spotLight\", {\n        position: [2, 5, 2],\n        color: \"#ffffff\",\n        intensity: 2.5,\n        \"shadow-mapSize-height\": 1024,\n        \"shadow-mapSize-width\": 1024,\n        \"shadow-camera-far\": 50,\n        \"shadow-camera-left\": -10,\n        \"shadow-camera-right\": 10,\n        \"shadow-camera-top\": 10,\n        \"shadow-camera-bottom\": -10,\n        castShadow: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Plane, {\n        receiveShadow: true,\n        rotation: [0, 0, 0],\n        position: [0, 5.5, -7.5],\n        args: [15, 15],\n        children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n          attach: \"material\",\n          color: \"#ffffff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), \" */}\", /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enablePan: true,\n        enableZoom: true,\n        enableRotate: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(App, \"IlBam56P3SEUE57O4+rNL3RSBNg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","Canvas","OrbitControls","Plane","App","props","orbitControlsRef","boxRef"],"sources":["/Users/tumolabsstudent/Desktop/app/src/App.tsx"],"sourcesContent":["// import React from \"react\";\nimport React, { useRef, useState } from \"react\";\nimport \"./Skybox\"\nimport { Canvas, useFrame } from \"@react-three/fiber\";\n\nimport SkyBox from \"./Skybox\";\nimport angleToRadians from \"./Angle\";\nimport \"./Skybox.scss\"\nimport \"./App.css\"\nimport { OrbitControls, PerspectiveCamera} from '@react-three/drei'\nimport { Box, Plane } from \"@react-three/drei\";\n// import { DoubleSide, Mesh } from \"three\";\nimport { Sky } from \"@react-three/drei\";\n\n// function Box(props:any) {\n//   const mesh = useRef<Mesh>(null!);\n\n//   // mesh.current.rotation.x += Math.PI / 2;\n//   // useFrame((state, delta) => (mesh.current.rotation.z += delta))\n\n//   return (\n//      <mesh castShadow receiveShadow {...props} ref={mesh} position={[0,0.5,0]}>\n//         <boxGeometry args={[0.5, 0.8, 0.8]} />\n//         <meshBasicMaterial attach=\"material\" color={\"red\"} />\n//      </mesh>\n//   );\n// }\n\n// function Plane(props:any) {\n//   const mesh = useRef<Mesh>(null!);\n\n//   // mesh.current.rotation.x += Math.PI / 2;\n//   // useFrame((state, delta) => (mesh.current.rotation.z += delta))\n\n//   return (\n//     <mesh castShadow receiveShadow {...props} ref={mesh} rotation={[-Math.PI/2, 0, 0]}>\n//       <planeGeometry args={[7, 7]}/>\n//       <meshBasicMaterial color=\"grey\" side={DoubleSide} />\n//     </mesh>\n//   );\n// }\n\nexport default function App(props:any) {\n  const orbitControlsRef = useRef(null);\n  // const ballRef = useRef(null);\n  const boxRef = useRef();\n   return (\n      // <div> \n        <Canvas shadows className=\"skybox\">\n          <spotLight\n          position={[2, 5, 2]}\n          color=\"#ffffff\"\n          intensity={2.5}\n          shadow-mapSize-height={1024}\n          shadow-mapSize-width={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n          castShadow\n        />\n        \n          {/* <ambientLight /> */}\n          {/* <PerspectiveCamera makeDefault rotation={[0, 0, Math.PI/4]} position={[50, 50, 50]} />\n          <OrbitControls ref={orbitControlsRef} minPolarAngle={angleToRadians(60)} maxPolarAngle={angleToRadians(80)} />\n          <SkyBox />\n          <Box\n            ref={boxRef}\n            castShadow\n            receiveShadow\n            position={[0, 0.5, 0]}\n            args={[3, 3, 3]}\n          >\n            <meshStandardMaterial attach=\"material\" color=\"#C42727\" />\n        </Box>\n          {/* <mesh position={[-2, 1.5, 0]} castShadow ref={ballRef}>\n                <sphereGeometry args={[0.5, 32, 32]} />\n                <meshStandardMaterial color=\"#ffffff\" metalness={0.6} roughness={0.2} />\n            </mesh> */}\n            <Plane\n          receiveShadow\n          rotation={[0, 0, 0]}\n          position={[0, 5.5, -7.5]}\n          args={[15, 15]}\n        >\n          <meshStandardMaterial attach=\"material\" color=\"#ffffff\" />\n        </Plane> */}\n          {/* <mesh rotation={[-(angleToRadians(90)), 0, 0]} castShadow receiveShadow>\n                <planeGeometry args={[20, 20]} />\n                <meshStandardMaterial color=\"grey\" />\n          </mesh> */}\n          {/* <ambientLight args={[\"#ffffff\", 0.3]} />\n          <spotLight args={[\"white\", 1.5, 200, angleToRadians(90)]} position={[60, 5, 2]} rotation={[-(angleToRadians(90)), 0, 0]}  intensity={10}\n        shadow-mapSize-height={1024}\n        shadow-mapSize-width={1024}\n        shadow-camera-far={50}\n        shadow-camera-left={-10}\n        shadow-camera-right={10}\n        shadow-camera-top={10}\n        shadow-camera-bottom={-10}\n        castShadow /> */}\n          {/* <ambientLight intensity={1} />\n          <directionalLight\n            intensity={0.5}\n            castShadow\n            shadow-mapSize-height={512}\n            shadow-mapSize-width={512}\n            position={[90,90,90]}\n            color={\"red\"}\n            // shadow-camera-left={-20}\n\n            // position={[80, 80, 30]}\n          />\n          <SkyBox /> \n          <Box />\n          <Plane /> */}\n          \n          {/* <group>\n          <Box castShadow receiveShadow ref={boxRef} position={[0, 0, 0]}>\n            <meshStandardMaterial attach=\"material\" color=\"white\" />\n          </Box>\n          <Plane\n            receiveShadow\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -1, 0]}\n            args={[1000, 1000]}\n          >\n            <meshStandardMaterial attach=\"material\" color=\"white\" />\n          </Plane>\n        </group> */}\n          {/* <PerspectiveCamera position={[2, 2, 2]} makeDefault /> */}\n          {/* <OrbitControls />  */}\n          <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\n        </Canvas>\n   );\n}"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,QAAkB,OAAO;AAC/C,OAAO,UAAU;AACjB,SAASC,MAAM,QAAkB,oBAAoB;AAIrD,OAAO,eAAe;AACtB,OAAO,WAAW;AAClB,SAASC,aAAa,QAA0B,mBAAmB;AACnE,SAAcC,KAAK,QAAQ,mBAAmB;AAC9C;AAAA;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,GAAG,CAACC,KAAS,EAAE;EAAA;EACrC,MAAMC,gBAAgB,GAAGN,MAAM,CAAC,IAAI,CAAC;EACrC;EACA,MAAMO,MAAM,GAAGP,MAAM,EAAE;EACtB;IAAA;IACG;IACE,QAAC,MAAM;MAAC,OAAO;MAAC,SAAS,EAAC,QAAQ;MAAA,wBAChC;QACA,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;QACpB,KAAK,EAAC,SAAS;QACf,SAAS,EAAE,GAAI;QACf,yBAAuB,IAAK;QAC5B,wBAAsB,IAAK;QAC3B,qBAAmB,EAAG;QACtB,sBAAoB,CAAC,EAAG;QACxB,uBAAqB,EAAG;QACxB,qBAAmB,EAAG;QACtB,wBAAsB,CAAC,EAAG;QAC1B,UAAU;MAAA;QAAA;QAAA;QAAA;MAAA,QACV,eAmBE,QAAC,KAAK;QACR,aAAa;QACb,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;QACpB,QAAQ,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAE;QACzB,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAE;QAAA,uBAEf;UAAsB,MAAM,EAAC,UAAU;UAAC,KAAK,EAAC;QAAS;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QACpD,QACN,eA6CA,QAAC,aAAa;QAAC,SAAS,EAAE,IAAK;QAAC,UAAU,EAAE,IAAK;QAAC,YAAY,EAAE;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA;EACjE;AAEjB;AAAC,GA9FuBI,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}