import { ConfigService } from '@nestjs/config';
import { OnGatewayConnection } from '@nestjs/websockets';
import { Socket } from 'socket.io';
import { AuthService } from 'src/auth/services/auth.service';
import { UserService } from 'src/user/services/user.service';
import { GroupChat } from './entities';
import { ChatService } from './services/chat.service';
import { GroupChatService } from './services/group-chat.service';
export declare class ChatGateway implements OnGatewayConnection {
    private readonly authService;
    private readonly userService;
    private readonly groupChatService;
    private readonly chatService;
    private readonly configService;
    constructor(authService: AuthService, userService: UserService, groupChatService: GroupChatService, chatService: ChatService, configService: ConfigService);
    server: any;
    afterInit(): void;
    handleConnection(client: Socket): Promise<any>;
    handleDisconnect(client: Socket): Promise<any>;
    emitGroup(gchat: any, event: string, ...args: any): void;
    getGroup(client: Socket, id: number): Promise<void>;
    getUserChats(client: Socket): Promise<void>;
    handleMessage(client: Socket, data: any): Promise<void>;
    joinGroup(client: Socket, partialGroup: GroupChat): Promise<void>;
    leaveChannel(client: Socket, data: any): Promise<void>;
    toggleBan(client: Socket, data: any): Promise<void>;
    toggleMute(client: Socket, data: any): Promise<void>;
    getChat(client: Socket, channelid: number): Promise<void>;
    GetUserChats(client: Socket): Promise<void>;
    joinChat(client: Socket, userId: number): Promise<void>;
    sendMessageDM(client: Socket, data: any): Promise<void>;
}
